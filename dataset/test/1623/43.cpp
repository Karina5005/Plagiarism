// Author:- Piyush, naam toh suna hi nahi hoga#include<bits/stdc++.h>using namespace std;using namespace chrono;#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);#define MOD 1000000007#define MOD1 998244353#define INF 1e18#define nline "\n"#define pb push_back#define ppb pop_back#define mp make_pair#define ff first#define ss second#define PI 3.141592653589793238462#define set_bits __builtin_popcount#define sz(x) (int)(x.size())#define tc(t)  while(t--)#define all(x) x.begin(), x.end()#define clr(x) memset(x, 0, sizeof(x))#define sortall(x) sort(all(x))#define w(t)            int t; cin>>t; while(t--)#define fs(x) fixed<<setprecision(x)#define mid(l,r)        (l+(r-l)/2)#define loop(i,a,b) 	for(int i=(a);i<=(b);i++)#define   fi(a,b) for(int i=a;i<b;i++)#define   fj(a,b) for(int j=a;j<b;j++)#define   ff first#define   ss second#define   ll long long#define   ld long double#define   ull unsigned long long#define   bp(x) __builtin_popcount(x)#define   pr(x) for(auto it: x) cout<<it<<" "; cout<<endl;#define   getMax(x) max_element(x.begin(),x.end())#define   getMin(x) min_element(x.begin(),x.end())#define   endl "\n"#define   fo(i,a,b) for(i=a;i<=b;i++)#define   nah cout << "NO" << endl#define   yeah cout << "YES" << endltypedef   vector<int> vi;typedef   vector< pair<int, int> > vii;typedef   vector<long long> vl;typedef   pair<int, int> pii;typedef   pair<ll, ll> pll;typedef   vector< pair<ll, ll> > vll;typedef priority_queue<int, vector<int>, greater<int>> min_heapi;typedef priority_queue<ll, vector<ll>, greater<ll>> min_heapli;typedef priority_queue<int> max_heapi;typedef priority_queue<ll> max_heapli;typedef unordered_map<int, int> umapi;typedef unordered_map<ll, ll> umapli;#ifndef ONLINE_JUDGE#define debug(x) cerr << #x<<" "; _print(x); cerr << endl;#else#define debug(x);#endiftypedef pair<ll, ll>	pl;typedef pair <int,int> pii;typedef vector<int>		vi;typedef vector<ll>		vl;typedef vector<pii>		vpii;typedef vector<pl>		vpl;typedef vector<vi>		vvi;typedef vector<vl>		vvl;typedef priority_queue<int, vector<int>, greater<int>> min_heap32;typedef priority_queue<ll, vector<ll>, greater<ll>> min_heap64;typedef priority_queue<int> max_heap32;typedef priority_queue<ll> max_heap64;typedef unordered_map<int, int> umap32;typedef unordered_map<ll, ll> umap64;void _print(ll t) {cerr << t;}void _print(int t) {cerr << t;}void _print(string t) {cerr << t;}void _print(char t) {cerr << t;}void _print(ld t) {cerr << t;}void _print(double t) {cerr << t;}void _print(ull t) {cerr << t;}template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }template <class T, class V> void _print(pair <T, V> p);template <class T> void _print(vector <T> v);template <class T> void _print(set <T> v);template <class T, class V> void _print(map <T, V> v);template <class T> void _print(multiset <T> v);template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}//#include<ext/pb_ds/assocnt_container.hpp>//#include<ext/pb_ds/tree_policy.hpp>//using namespace __gnu_pbds;//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key//void _print(pbds v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}/*---------------------------------------------------------------------------------------------------------------------------*/ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}ll lcm(ll a, ll b) {return (a*b)/gcd(a,b);}ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime bll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}bool revsort(ll a, ll b) {return a > b;}void swap(int &x, int &y) {int temp = x; x = y; y = temp;}ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}void google(int t) {cout << "Case #" << t << ": ";}vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime mll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0)n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))int cmp(int a,int b){return a>b;}//int isprime(int N){if(N<2 || (!(N&1) && N!=2))return 0;for(int i=3; i*i<=N; i+=2){if(!(N%i))return 0;}return 1;}int bin_pow(int ind, int power){if(power == 0){return 1;}if(power & 1){return ind * bin_pow(ind,power - 1) % MOD;}else{return bin_pow((ind * ind) % MOD , power / 2) % MOD;}}//ll fact(ll n);//ll nCr(ll n, ll r){return fact(n) / (fact(r) * fact(n - r));}//ll fact(ll n){ll res = 1;for (ll i = 2; i <= n; i++)res = res * i;return res;}//"KADANE'S ALGORITHM" //iski time complexity o(n) hn i.e the smallest possiblelong long maxsubarraysum(long long *array,long long n){long long best = 0, sum = 0;for (long long  k = 0; k < n; k++) {sum = max(array[k],sum+array[k]);best = max(best,sum);}return  best ;}void printBinary(int num){for(int i=10;i>=0;--i){cout<<((num>>i)&1);}cout<<endl;}//int nPr(int n, int r){return fact(n)/fact(n-r);}//bool areDigitsSame(int n){vector<int> a;while(n>0){int m=n%10;n=n/10;a.pb(m);}for(int i=0;i<a.size()-1;i++){if(v[i]!=a[i+1]){return false;}}return true;}//int binarySearch( vector<int>& arr, int l, int r, int x){while (l <= r) {int m = l + (r - l) / 2;if (arr[m] == x) {return m + 1;}if (arr[m] < x) {l = m + 1;}else {r = m - 1;}}int min = arr[l] > x ? l : r;++min;return min;}// Method to calculate xorint computeXOR(int n){if (n % 4 == 0)return n;if (n % 4 == 1)return 1;if (n % 4 == 2)return n + 1;return 0;}string toBinary(long long x){if(x == 0)return "";else{string s = toBinary(x / 2);s.push_back(char('0' + x % 2));return s;}}/*--------------------------------------------------------------------------------------------------------------------------*//* * To set a bit use:- * mask = (mask | (1<<arr[i])) * * To find no of set bits in two bit-representations(intersection):- * int intersection = (masks[i] and masks[j]) * int common_bits = _builtin_popcount( intersection ) * */class DSU{private:    vector<ll> parent, size;public:    ll findPar(ll node){        if(parent[node] == node) return node; //whenever we find a node which is parent of itself we return it        return parent[node] = findPar(parent[node]); //path compression        //this makes the size of the tree becomes log(n)        //hence the time complexity of this algorithm becomes O(log(n))        //eg:- 4->5->6->7->8        //eg we call 8, it checks its parent 7, whose parent is 6, whose parent is 5, whose parent is 4, whose parent is 4(itself)        //hence while returning we update parent of 5 as 4, parent of 6 as 4, parent of 7 as 4, parent of 8 as 4,        //and finally we return 4    }    DSU(ll n){        for(ll i = 1; i<=n; i++){            parent.push_back(i); // initially we have made n different nodes which are parents of themselves            size.push_back(1); // size of each component is 1 as each node is parent of itself        }    }public:    void unionOfNodes(ll u, ll v){        ll pu = findPar(u);        ll pv = findPar(v);        if(pu==pv){            return; //no need to connect them        }        if(size[pu]<size[pv]){            //pu chota hai, toh chota jaake bade mein lagega            parent[pu] = pv;            size[pv] += size[pu]; //size of pv increases by size of pu        } else {            //pv chota hai, toh chota jaake bade mein lagega            parent[pv] = pu;            size[pu] += size[pv]; //size of pu increases by size of pv        }    }};//const int MAX_SIZE = 2800001;//vector<int>isprime(MAX_SIZE , true);//vector<int> idx(MAX_SIZE), SPF(MAX_SIZE), prime;//void mani_seive(int N)//{//    isprime[0] = isprime[1] = false ;//    for (int i = 2; i < N ; i++)//    {//        if (isprime[i])//        {//            prime.push_back(i);//            SPF[i] = i;//        }//        for (int j = 0; j < (int)prime.size() && i * prime[j] < N && prime[j] <= SPF[i]; j++)//        {//            isprime[i * prime[j]] = false;//            SPF[i * prime[j]] = prime[j] ;//        }//    }//    for (int i = 0; i < (int)prime.size(); i++)//    {//        idx[prime[i]] = i + 1;//    }//}//const int M = 1e6+10;//vector<bool> prime(M, true);//void sieve(){//    prime[0] = prime[1] = false;//    for(int i = 2; i*i<=M; i++){//        if(prime[i]){//            for(int j = i*i; j<M; j+=i){//                prime[j] = false;//            }//        }//    }//}//const int M = 1e8;const ll L = 1e10;void solve() {    ll n;    cin >> n;    vl h(n);    fi(0, n){        cin >> h[i];    }    auto check = [&] (ll x) {        vl a(h.begin(),h.end());        for (ll i = n-1; i >= 2; i--) {            if (a[i] < x)                return false;            ll d = min(h[i],a[i]-x)/3;            a[i-1] += d;            a[i-2] += 2*d;        }        return a[0] >= x and a[1] >= x;    };    ll l = 0, r = *max_element(h.begin(),h.end());    while (l < r) {        ll mid = l + (r-l+1)/2;        if (check(mid))            l = mid;        else            r = mid - 1;    }    cout << l << endl;}int main() {//    fastio();    fast;#ifndef ONLINE_JUDGE    freopen("Input.txt", "r", stdin);    freopen("Output.txt", "w", stdout);    freopen("Error.txt", "w", stderr);#endif    auto start1 = high_resolution_clock::now();    /* Piyush Agrawal*///    sieve();//    mani_seive(2000002);    ll tc=1;    cin>>tc;    while(tc--) {        // cout << "Case #" << tc << ": ";        solve();    }    auto stop1 = high_resolution_clock::now();    auto duration = duration_cast<microseconds>(stop1 - start1);#ifndef ONLINE_JUDGE    cerr << "Time: " << duration.count() / 1000 << "ms"<< endl;#endif    return 0;}/* stuff you should look for* stack/set/gcd/palindrome/twopointer/slidingwindowprefix sum/range query/ patterns/matrices/stringlexographicaly/xoor/subsequence subarray/overlapping intervalsfactors(rootn)   primefactorisation  vectorofallfactors dfs bfs msdfsavailaible snip-dfs,mint,quadraticformula,2dvectormytemp,negativemod,primefactorisation  * int overflow, array bounds  * special cases (n=1?)  * do smth instead of nothing and stay organized  * WRITE STUFF DOWN  * DON'T GET STUCK ON ONE APPROACH*//* * Standard trick to find total number of multiples of any number in the array * vll cnt(n+1,0); * vll multiples(n+1,0); * for(int i=1; i<=n; i++){ *    for(int j=i; j<=n; j+=i){ *        multiples[i] += cnt[j]; *    } *} * */