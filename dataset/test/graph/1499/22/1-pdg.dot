digraph "get_divisors" {  
"1000187" [label = "(METHOD,get_divisors)" ]
"1000226" [label = "(METHOD_RETURN,vector<int>)" ]
"1000188" [label = "(PARAM,const int& n)" ]
"1000224" [label = "(RETURN,return res;,return res;)" ]
"1000193" [label = "(<operator>.assignment,i = 1)" ]
"1000196" [label = "(<operator>.lessEqualsThan,i * i <= n)" ]
"1000201" [label = "(<operator>.postIncrement,i++)" ]
"1000225" [label = "(IDENTIFIER,res,return res;)" ]
"1000197" [label = "(<operator>.multiplication,i * i)" ]
"1000205" [label = "(<operator>.equals,n % i == 0)" ]
"1000211" [label = "(res.push_back,res.push_back(i))" ]
"1000206" [label = "(<operator>.modulo,n % i)" ]
"1000214" [label = "(<operator>.notEquals,i != n / i)" ]
"1000220" [label = "(res.push_back,res.push_back(n / i))" ]
"1000216" [label = "(<operator>.division,n / i)" ]
"1000221" [label = "(<operator>.division,n / i)" ]
  "1000188" -> "1000226"  [ label = "DDG: n"] 
  "1000197" -> "1000226"  [ label = "DDG: i"] 
  "1000196" -> "1000226"  [ label = "DDG: i * i"] 
  "1000196" -> "1000226"  [ label = "DDG: n"] 
  "1000196" -> "1000226"  [ label = "DDG: i * i <= n"] 
  "1000205" -> "1000226"  [ label = "DDG: n % i"] 
  "1000205" -> "1000226"  [ label = "DDG: n % i == 0"] 
  "1000211" -> "1000226"  [ label = "DDG: res.push_back(i)"] 
  "1000214" -> "1000226"  [ label = "DDG: n / i"] 
  "1000214" -> "1000226"  [ label = "DDG: i != n / i"] 
  "1000220" -> "1000226"  [ label = "DDG: n / i"] 
  "1000220" -> "1000226"  [ label = "DDG: res.push_back(n / i)"] 
  "1000224" -> "1000226"  [ label = "DDG: <RET>"] 
  "1000187" -> "1000188"  [ label = "DDG: "] 
  "1000225" -> "1000224"  [ label = "DDG: res"] 
  "1000187" -> "1000224"  [ label = "DDG: "] 
  "1000187" -> "1000193"  [ label = "DDG: "] 
  "1000187" -> "1000225"  [ label = "DDG: "] 
  "1000197" -> "1000196"  [ label = "DDG: i"] 
  "1000206" -> "1000196"  [ label = "DDG: n"] 
  "1000216" -> "1000196"  [ label = "DDG: n"] 
  "1000221" -> "1000196"  [ label = "DDG: n"] 
  "1000188" -> "1000196"  [ label = "DDG: n"] 
  "1000187" -> "1000196"  [ label = "DDG: "] 
  "1000206" -> "1000201"  [ label = "DDG: i"] 
  "1000214" -> "1000201"  [ label = "DDG: i"] 
  "1000221" -> "1000201"  [ label = "DDG: i"] 
  "1000187" -> "1000201"  [ label = "DDG: "] 
  "1000193" -> "1000197"  [ label = "DDG: i"] 
  "1000201" -> "1000197"  [ label = "DDG: i"] 
  "1000187" -> "1000197"  [ label = "DDG: "] 
  "1000206" -> "1000205"  [ label = "DDG: n"] 
  "1000206" -> "1000205"  [ label = "DDG: i"] 
  "1000187" -> "1000205"  [ label = "DDG: "] 
  "1000196" -> "1000206"  [ label = "DDG: n"] 
  "1000188" -> "1000206"  [ label = "DDG: n"] 
  "1000187" -> "1000206"  [ label = "DDG: "] 
  "1000197" -> "1000206"  [ label = "DDG: i"] 
  "1000206" -> "1000211"  [ label = "DDG: i"] 
  "1000187" -> "1000211"  [ label = "DDG: "] 
  "1000216" -> "1000214"  [ label = "DDG: i"] 
  "1000187" -> "1000214"  [ label = "DDG: "] 
  "1000216" -> "1000214"  [ label = "DDG: n"] 
  "1000206" -> "1000216"  [ label = "DDG: n"] 
  "1000188" -> "1000216"  [ label = "DDG: n"] 
  "1000187" -> "1000216"  [ label = "DDG: "] 
  "1000211" -> "1000216"  [ label = "DDG: i"] 
  "1000221" -> "1000220"  [ label = "DDG: n"] 
  "1000221" -> "1000220"  [ label = "DDG: i"] 
  "1000216" -> "1000221"  [ label = "DDG: n"] 
  "1000188" -> "1000221"  [ label = "DDG: n"] 
  "1000187" -> "1000221"  [ label = "DDG: "] 
  "1000214" -> "1000221"  [ label = "DDG: i"] 
  "1000196" -> "1000201"  [ label = "CDG: "] 
  "1000196" -> "1000197"  [ label = "CDG: "] 
  "1000196" -> "1000206"  [ label = "CDG: "] 
  "1000196" -> "1000205"  [ label = "CDG: "] 
  "1000196" -> "1000196"  [ label = "CDG: "] 
  "1000205" -> "1000211"  [ label = "CDG: "] 
  "1000205" -> "1000216"  [ label = "CDG: "] 
  "1000205" -> "1000214"  [ label = "CDG: "] 
  "1000214" -> "1000220"  [ label = "CDG: "] 
  "1000214" -> "1000221"  [ label = "CDG: "] 
}
