digraph "operator>>" {  
"1000247" [label = "(METHOD,operator>>)" ]
"1000268" [label = "(METHOD_RETURN,istream &)" ]
"1000248" [label = "(PARAM,istream &is)" ]
"1000249" [label = "(PARAM,vector<T> &arr)" ]
"1000266" [label = "(RETURN,return is;,return is;)" ]
"1000253" [label = "(<operator>.assignment,a = arr.begin())" ]
"1000256" [label = "(<operator>.notEquals,a != arr.end())" ]
"1000259" [label = "(<operator>.postIncrement,a++)" ]
"1000267" [label = "(IDENTIFIER,is,return is;)" ]
"1000262" [label = "(<operator>.arithmeticShiftRight,is >> *a)" ]
"1000258" [label = "(arr.end,arr.end())" ]
"1000264" [label = "(<operator>.indirection,*a)" ]
  "1000266" -> "1000268"  [ label = "DDG: <RET>"] 
  "1000248" -> "1000268"  [ label = "DDG: is"] 
  "1000249" -> "1000268"  [ label = "DDG: arr"] 
  "1000253" -> "1000268"  [ label = "DDG: arr.begin()"] 
  "1000256" -> "1000268"  [ label = "DDG: a"] 
  "1000256" -> "1000268"  [ label = "DDG: arr.end()"] 
  "1000256" -> "1000268"  [ label = "DDG: a != arr.end()"] 
  "1000262" -> "1000268"  [ label = "DDG: is"] 
  "1000262" -> "1000268"  [ label = "DDG: *a"] 
  "1000262" -> "1000268"  [ label = "DDG: is >> *a"] 
  "1000247" -> "1000248"  [ label = "DDG: "] 
  "1000247" -> "1000249"  [ label = "DDG: "] 
  "1000267" -> "1000266"  [ label = "DDG: is"] 
  "1000262" -> "1000266"  [ label = "DDG: is"] 
  "1000248" -> "1000266"  [ label = "DDG: is"] 
  "1000247" -> "1000253"  [ label = "DDG: "] 
  "1000247" -> "1000267"  [ label = "DDG: "] 
  "1000253" -> "1000256"  [ label = "DDG: a"] 
  "1000259" -> "1000256"  [ label = "DDG: a"] 
  "1000247" -> "1000256"  [ label = "DDG: "] 
  "1000256" -> "1000259"  [ label = "DDG: a"] 
  "1000247" -> "1000259"  [ label = "DDG: "] 
  "1000248" -> "1000262"  [ label = "DDG: is"] 
  "1000247" -> "1000262"  [ label = "DDG: "] 
  "1000256" -> "1000256"  [ label = "CDG: "] 
  "1000256" -> "1000262"  [ label = "CDG: "] 
  "1000256" -> "1000259"  [ label = "CDG: "] 
  "1000256" -> "1000258"  [ label = "CDG: "] 
  "1000256" -> "1000264"  [ label = "CDG: "] 
}
