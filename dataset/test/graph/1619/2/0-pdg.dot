digraph "precompute" {  
"1000103" [label = "(METHOD,precompute)" ]
"1000143" [label = "(METHOD_RETURN,void)" ]
"1000106" [label = "(<operator>.assignment,n = 1)" ]
"1000109" [label = "(<operator>.lessEqualsThan,L* n <= MAXN)" ]
"1000114" [label = "(V.push_back,V.push_back(n*n))" ]
"1000119" [label = "(<operator>.assignment,n = 1)" ]
"1000122" [label = "(<operator>.lessEqualsThan,L * n * n <= MAXN)" ]
"1000129" [label = "(V.push_back,V.push_back(n*n*n))" ]
"1000135" [label = "(sort,sort(V.begin(), V.end()))" ]
"1000138" [label = "(V.erase,V.erase(unique(V.begin(), V.end()), V.end()))" ]
"1000110" [label = "(<operator>.multiplication,L* n)" ]
"1000115" [label = "(<operator>.multiplication,n*n)" ]
"1000123" [label = "(<operator>.multiplication,L * n * n)" ]
"1000130" [label = "(<operator>.multiplication,n*n*n)" ]
"1000139" [label = "(unique,unique(V.begin(), V.end()))" ]
"1000125" [label = "(<operator>.multiplication,n * n)" ]
"1000132" [label = "(<operator>.multiplication,n*n)" ]
  "1000109" -> "1000143"  [ label = "DDG: L* n"] 
  "1000109" -> "1000143"  [ label = "DDG: L* n <= MAXN"] 
  "1000114" -> "1000143"  [ label = "DDG: V.push_back(n*n)"] 
  "1000123" -> "1000143"  [ label = "DDG: L"] 
  "1000123" -> "1000143"  [ label = "DDG: n * n"] 
  "1000122" -> "1000143"  [ label = "DDG: L * n * n"] 
  "1000122" -> "1000143"  [ label = "DDG: MAXN"] 
  "1000122" -> "1000143"  [ label = "DDG: L * n * n <= MAXN"] 
  "1000130" -> "1000143"  [ label = "DDG: n"] 
  "1000130" -> "1000143"  [ label = "DDG: n*n"] 
  "1000129" -> "1000143"  [ label = "DDG: n*n*n"] 
  "1000129" -> "1000143"  [ label = "DDG: V.push_back(n*n*n)"] 
  "1000135" -> "1000143"  [ label = "DDG: sort(V.begin(), V.end())"] 
  "1000139" -> "1000143"  [ label = "DDG: V.begin()"] 
  "1000138" -> "1000143"  [ label = "DDG: unique(V.begin(), V.end())"] 
  "1000138" -> "1000143"  [ label = "DDG: V.end()"] 
  "1000138" -> "1000143"  [ label = "DDG: V.erase(unique(V.begin(), V.end()), V.end())"] 
  "1000103" -> "1000106"  [ label = "DDG: "] 
  "1000103" -> "1000119"  [ label = "DDG: "] 
  "1000110" -> "1000109"  [ label = "DDG: n"] 
  "1000110" -> "1000109"  [ label = "DDG: L"] 
  "1000103" -> "1000109"  [ label = "DDG: "] 
  "1000115" -> "1000114"  [ label = "DDG: n"] 
  "1000123" -> "1000122"  [ label = "DDG: L"] 
  "1000123" -> "1000122"  [ label = "DDG: n * n"] 
  "1000109" -> "1000122"  [ label = "DDG: MAXN"] 
  "1000103" -> "1000122"  [ label = "DDG: "] 
  "1000130" -> "1000129"  [ label = "DDG: n*n"] 
  "1000130" -> "1000129"  [ label = "DDG: n"] 
  "1000103" -> "1000135"  [ label = "DDG: "] 
  "1000139" -> "1000138"  [ label = "DDG: V.end()"] 
  "1000139" -> "1000138"  [ label = "DDG: V.begin()"] 
  "1000103" -> "1000138"  [ label = "DDG: "] 
  "1000103" -> "1000110"  [ label = "DDG: "] 
  "1000106" -> "1000110"  [ label = "DDG: n"] 
  "1000110" -> "1000115"  [ label = "DDG: n"] 
  "1000103" -> "1000115"  [ label = "DDG: "] 
  "1000110" -> "1000123"  [ label = "DDG: L"] 
  "1000103" -> "1000123"  [ label = "DDG: "] 
  "1000125" -> "1000123"  [ label = "DDG: n"] 
  "1000132" -> "1000130"  [ label = "DDG: n"] 
  "1000103" -> "1000130"  [ label = "DDG: "] 
  "1000103" -> "1000139"  [ label = "DDG: "] 
  "1000119" -> "1000125"  [ label = "DDG: n"] 
  "1000103" -> "1000125"  [ label = "DDG: "] 
  "1000125" -> "1000132"  [ label = "DDG: n"] 
  "1000103" -> "1000132"  [ label = "DDG: "] 
}
