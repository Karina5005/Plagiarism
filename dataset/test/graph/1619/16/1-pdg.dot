digraph "SieveOfEratosthenes" {  
"1000134" [label = "(METHOD,SieveOfEratosthenes)" ]
"1000180" [label = "(METHOD_RETURN,void)" ]
"1000135" [label = "(PARAM,int n)" ]
"1000137" [label = "(memset,memset(prime, true, sizeof(prime)))" ]
"1000144" [label = "(<operator>.assignment,p = 2)" ]
"1000147" [label = "(<operator>.lessEqualsThan,p * p <= n)" ]
"1000152" [label = "(<operator>.postIncrement,p++)" ]
"1000140" [label = "(<operator>.sizeOf,sizeof(prime))" ]
"1000148" [label = "(<operator>.multiplication,p * p)" ]
"1000156" [label = "(<operator>.equals,prime[p] == true)" ]
"1000164" [label = "(<operator>.assignment,i = p * p)" ]
"1000169" [label = "(<operator>.lessEqualsThan,i <= n)" ]
"1000172" [label = "(<operator>.assignmentPlus,i += p)" ]
"1000175" [label = "(<operator>.assignment,prime[i] = false)" ]
"1000166" [label = "(<operator>.multiplication,p * p)" ]
"1000157" [label = "(<operator>.indirectIndexAccess,prime[p])" ]
"1000176" [label = "(<operator>.indirectIndexAccess,prime[i])" ]
  "1000135" -> "1000180"  [ label = "DDG: n"] 
  "1000137" -> "1000180"  [ label = "DDG: prime"] 
  "1000137" -> "1000180"  [ label = "DDG: true"] 
  "1000137" -> "1000180"  [ label = "DDG: memset(prime, true, sizeof(prime))"] 
  "1000148" -> "1000180"  [ label = "DDG: p"] 
  "1000147" -> "1000180"  [ label = "DDG: p * p"] 
  "1000147" -> "1000180"  [ label = "DDG: n"] 
  "1000147" -> "1000180"  [ label = "DDG: p * p <= n"] 
  "1000156" -> "1000180"  [ label = "DDG: prime[p]"] 
  "1000156" -> "1000180"  [ label = "DDG: true"] 
  "1000156" -> "1000180"  [ label = "DDG: prime[p] == true"] 
  "1000169" -> "1000180"  [ label = "DDG: i"] 
  "1000169" -> "1000180"  [ label = "DDG: i <= n"] 
  "1000175" -> "1000180"  [ label = "DDG: prime[i]"] 
  "1000175" -> "1000180"  [ label = "DDG: false"] 
  "1000134" -> "1000135"  [ label = "DDG: "] 
  "1000134" -> "1000137"  [ label = "DDG: "] 
  "1000134" -> "1000144"  [ label = "DDG: "] 
  "1000134" -> "1000140"  [ label = "DDG: "] 
  "1000148" -> "1000147"  [ label = "DDG: p"] 
  "1000169" -> "1000147"  [ label = "DDG: n"] 
  "1000135" -> "1000147"  [ label = "DDG: n"] 
  "1000134" -> "1000147"  [ label = "DDG: "] 
  "1000148" -> "1000152"  [ label = "DDG: p"] 
  "1000166" -> "1000152"  [ label = "DDG: p"] 
  "1000134" -> "1000152"  [ label = "DDG: "] 
  "1000144" -> "1000148"  [ label = "DDG: p"] 
  "1000152" -> "1000148"  [ label = "DDG: p"] 
  "1000134" -> "1000148"  [ label = "DDG: "] 
  "1000137" -> "1000156"  [ label = "DDG: prime"] 
  "1000137" -> "1000156"  [ label = "DDG: true"] 
  "1000134" -> "1000156"  [ label = "DDG: "] 
  "1000166" -> "1000164"  [ label = "DDG: p"] 
  "1000166" -> "1000172"  [ label = "DDG: p"] 
  "1000134" -> "1000172"  [ label = "DDG: "] 
  "1000134" -> "1000175"  [ label = "DDG: "] 
  "1000134" -> "1000164"  [ label = "DDG: "] 
  "1000164" -> "1000169"  [ label = "DDG: i"] 
  "1000172" -> "1000169"  [ label = "DDG: i"] 
  "1000134" -> "1000169"  [ label = "DDG: "] 
  "1000147" -> "1000169"  [ label = "DDG: n"] 
  "1000135" -> "1000169"  [ label = "DDG: n"] 
  "1000169" -> "1000172"  [ label = "DDG: i"] 
  "1000148" -> "1000166"  [ label = "DDG: p"] 
  "1000134" -> "1000166"  [ label = "DDG: "] 
  "1000147" -> "1000156"  [ label = "CDG: "] 
  "1000147" -> "1000147"  [ label = "CDG: "] 
  "1000147" -> "1000152"  [ label = "CDG: "] 
  "1000147" -> "1000148"  [ label = "CDG: "] 
  "1000147" -> "1000157"  [ label = "CDG: "] 
  "1000156" -> "1000164"  [ label = "CDG: "] 
  "1000156" -> "1000166"  [ label = "CDG: "] 
  "1000156" -> "1000169"  [ label = "CDG: "] 
  "1000169" -> "1000175"  [ label = "CDG: "] 
  "1000169" -> "1000176"  [ label = "CDG: "] 
  "1000169" -> "1000172"  [ label = "CDG: "] 
  "1000169" -> "1000169"  [ label = "CDG: "] 
}
