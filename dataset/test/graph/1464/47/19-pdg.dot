digraph "main" {  
"1000909" [label = "(METHOD,main)" ]
"1001182" [label = "(METHOD_RETURN,int)" ]
"1000911" [label = "(scanf,scanf(\"%d%d\", &N, &Q))" ]
"1000943" [label = "(dfs,dfs())" ]
"1000944" [label = "(assert,assert(X==N))" ]
"1000948" [label = "(<operator>.assignment,X=0)" ]
"1000951" [label = "(dfs2,dfs2())" ]
"1000952" [label = "(<operator>.assignment,bit = BIT(N))" ]
"1000924" [label = "(<operator>.lessThan,i+1<N)" ]
"1000929" [label = "(<operator>.preIncrement,++i)" ]
"1000957" [label = "(<operator>.assignment,max = ST(N))" ]
"1000961" [label = "(<operator>.assignment,hvst = ST(X))" ]
"1000966" [label = "(RETURN,return d[u]>d[v] || !(d[v]>d[u]) && u<v;,return d[u]>d[v] || !(d[v]>d[u]) && u<v;)" ]
"1000932" [label = "(scanf,scanf(\"%d%d\", &u, &v))" ]
"1000945" [label = "(<operator>.equals,X==N)" ]
"1000954" [label = "(BIT,BIT(N))" ]
"1000967" [label = "(<operator>.logicalOr,d[u]>d[v] || !(d[v]>d[u]) && u<v)" ]
"1000925" [label = "(<operator>.addition,i+1)" ]
"1000939" [label = "(a[u].push_back,a[u].push_back(v))" ]
"1000941" [label = "(a[v].push_back,a[v].push_back(u))" ]
"1000959" [label = "(ST,ST(N))" ]
"1000963" [label = "(ST,ST(X))" ]
"1000968" [label = "(<operator>.greaterThan,d[u]>d[v])" ]
"1000975" [label = "(<operator>.logicalAnd,!(d[v]>d[u]) && u<v)" ]
"1000976" [label = "(<operator>.logicalNot,!(d[v]>d[u]))" ]
"1000984" [label = "(<operator>.lessThan,u<v)" ]
"1000977" [label = "(<operator>.greaterThan,d[v]>d[u])" ]
"1001107" [label = "(<operator>.minus,-INF)" ]
"1000992" [label = "(<operator>.lessThan,i<Q)" ]
"1000995" [label = "(<operator>.preIncrement,++i)" ]
"1000999" [label = "(scanf,scanf(\"%d\", &t))" ]
"1000934" [label = "(<operator>.addressOf,&u)" ]
"1000936" [label = "(<operator>.addressOf,&v)" ]
"1001001" [label = "(<operator>.addressOf,&t)" ]
"1001004" [label = "(<operator>.equals,t==1)" ]
"1001059" [label = "(<operator>.equals,t==2)" ]
"1001114" [label = "(<operator>.equals,t==3)" ]
"1001008" [label = "(<operator>.preIncrement,++alive)" ]
"1001012" [label = "(scanf,scanf(\"%d%d\", &u, &v))" ]
"1001019" [label = "(<operator>.assignment,l=lca(u, v))" ]
"1001024" [label = "(bit.upd,bit.upd(pre[u], 1))" ]
"1001029" [label = "(bit.upd,bit.upd(pre[v], 1))" ]
"1001034" [label = "(bit.upd,bit.upd(pre[l], -1))" ]
"1001063" [label = "(<operator>.preDecrement,--alive)" ]
"1001067" [label = "(scanf,scanf(\"%d%d\", &u, &v))" ]
"1001074" [label = "(<operator>.assignment,l=lca(u, v))" ]
"1001079" [label = "(bit.upd,bit.upd(pre[u], -1))" ]
"1001085" [label = "(bit.upd,bit.upd(pre[v], -1))" ]
"1001091" [label = "(bit.upd,bit.upd(pre[l], 1))" ]
"1001119" [label = "(scanf,scanf(\"%d\", &x))" ]
"1001124" [label = "(<operator>.assignment,n=*poman.begin())" ]
"1001128" [label = "(<operator>.assignment,n=mu(n, std::min(d[n], x)))" ]
"1001138" [label = "(<operator>.assignment,top=mu(n, std::min(d[n], x)))" ]
"1001162" [label = "(<operator>.assignment,mv = gethld(n, top))" ]
"1001014" [label = "(<operator>.addressOf,&u)" ]
"1001016" [label = "(<operator>.addressOf,&v)" ]
"1001021" [label = "(lca,lca(u, v))" ]
"1001025" [label = "(<operator>.indirectIndexAccess,pre[u])" ]
"1001030" [label = "(<operator>.indirectIndexAccess,pre[v])" ]
"1001035" [label = "(<operator>.indirectIndexAccess,pre[l])" ]
"1001038" [label = "(<operator>.minus,-1)" ]
"1001041" [label = "(<operator>.logicalNot,!ctr[l]++)" ]
"1001069" [label = "(<operator>.addressOf,&u)" ]
"1001071" [label = "(<operator>.addressOf,&v)" ]
"1001076" [label = "(lca,lca(u, v))" ]
"1001080" [label = "(<operator>.indirectIndexAccess,pre[u])" ]
"1001083" [label = "(<operator>.minus,-1)" ]
"1001086" [label = "(<operator>.indirectIndexAccess,pre[v])" ]
"1001089" [label = "(<operator>.minus,-1)" ]
"1001092" [label = "(<operator>.indirectIndexAccess,pre[l])" ]
"1001097" [label = "(<operator>.logicalNot,!--ctr[l])" ]
"1001121" [label = "(<operator>.addressOf,&x)" ]
"1001126" [label = "(<operator>.indirection,*poman.begin())" ]
"1001130" [label = "(mu,mu(n, std::min(d[n], x)))" ]
"1001140" [label = "(mu,mu(n, std::min(d[n], x)))" ]
"1001148" [label = "(<operator>.lessThan,bit.qry(pre[top], post[top]) < alive)" ]
"1001164" [label = "(gethld,gethld(n, top))" ]
"1001168" [label = "(<operator>.greaterThan,mv+d[n]>x)" ]
"1001175" [label = "(printf,printf(\"No\n\"))" ]
"1000978" [label = "(<operator>.indirectIndexAccess,d[v])" ]
"1000981" [label = "(<operator>.indirectIndexAccess,d[u])" ]
"1001042" [label = "(<operator>.postIncrement,ctr[l]++)" ]
"1001047" [label = "(max.upd,max.upd(pre[l], d[l]))" ]
"1001054" [label = "(updhld,updhld(l))" ]
"1001056" [label = "(poman.insert,poman.insert(l))" ]
"1001098" [label = "(<operator>.preDecrement,--ctr[l])" ]
"1001103" [label = "(max.upd,max.upd(pre[l], -INF))" ]
"1001109" [label = "(updhld,updhld(l))" ]
"1001111" [label = "(poman.erase,poman.erase(l))" ]
"1001127" [label = "(poman.begin,poman.begin())" ]
"1001132" [label = "(std::min,std::min(d[n], x))" ]
"1001142" [label = "(std::min,std::min(d[n], x))" ]
"1001149" [label = "(bit.qry,bit.qry(pre[top], post[top]))" ]
"1001158" [label = "(printf,printf(\"No\n\"))" ]
"1001169" [label = "(<operator>.addition,mv+d[n])" ]
"1001178" [label = "(printf,printf(\"Yes\n\"))" ]
"1001043" [label = "(<operator>.indirectIndexAccess,ctr[l])" ]
"1001048" [label = "(<operator>.indirectIndexAccess,pre[l])" ]
"1001051" [label = "(<operator>.indirectIndexAccess,d[l])" ]
"1001099" [label = "(<operator>.indirectIndexAccess,ctr[l])" ]
"1001104" [label = "(<operator>.indirectIndexAccess,pre[l])" ]
"1001133" [label = "(<operator>.indirectIndexAccess,d[n])" ]
"1001143" [label = "(<operator>.indirectIndexAccess,d[n])" ]
"1001150" [label = "(<operator>.indirectIndexAccess,pre[top])" ]
"1001153" [label = "(<operator>.indirectIndexAccess,post[top])" ]
"1001171" [label = "(<operator>.indirectIndexAccess,d[n])" ]
  "1000911" -> "1001182"  [ label = "DDG: &N"] 
  "1000911" -> "1001182"  [ label = "DDG: &Q"] 
  "1000925" -> "1001182"  [ label = "DDG: i"] 
  "1000924" -> "1001182"  [ label = "DDG: i+1"] 
  "1000924" -> "1001182"  [ label = "DDG: i+1<N"] 
  "1000943" -> "1001182"  [ label = "DDG: dfs()"] 
  "1000944" -> "1001182"  [ label = "DDG: X==N"] 
  "1000944" -> "1001182"  [ label = "DDG: assert(X==N)"] 
  "1000951" -> "1001182"  [ label = "DDG: dfs2()"] 
  "1000952" -> "1001182"  [ label = "DDG: BIT(N)"] 
  "1000959" -> "1001182"  [ label = "DDG: N"] 
  "1000957" -> "1001182"  [ label = "DDG: ST(N)"] 
  "1000963" -> "1001182"  [ label = "DDG: X"] 
  "1000961" -> "1001182"  [ label = "DDG: ST(X)"] 
  "1000968" -> "1001182"  [ label = "DDG: d[u]"] 
  "1000968" -> "1001182"  [ label = "DDG: d[v]"] 
  "1000967" -> "1001182"  [ label = "DDG: d[u]>d[v]"] 
  "1000977" -> "1001182"  [ label = "DDG: d[v]"] 
  "1000977" -> "1001182"  [ label = "DDG: d[u]"] 
  "1000976" -> "1001182"  [ label = "DDG: d[v]>d[u]"] 
  "1000975" -> "1001182"  [ label = "DDG: !(d[v]>d[u])"] 
  "1000984" -> "1001182"  [ label = "DDG: u"] 
  "1000984" -> "1001182"  [ label = "DDG: v"] 
  "1000975" -> "1001182"  [ label = "DDG: u<v"] 
  "1000967" -> "1001182"  [ label = "DDG: !(d[v]>d[u]) && u<v"] 
  "1000967" -> "1001182"  [ label = "DDG: d[u]>d[v] || !(d[v]>d[u]) && u<v"] 
  "1000932" -> "1001182"  [ label = "DDG: &u"] 
  "1000932" -> "1001182"  [ label = "DDG: &v"] 
  "1000939" -> "1001182"  [ label = "DDG: v"] 
  "1000939" -> "1001182"  [ label = "DDG: a[u].push_back(v)"] 
  "1000941" -> "1001182"  [ label = "DDG: u"] 
  "1000941" -> "1001182"  [ label = "DDG: a[v].push_back(u)"] 
  "1000966" -> "1001182"  [ label = "DDG: <RET>"] 
  "1000957" -> "1001182"  [ label = "DDG: max"] 
  "1000961" -> "1001182"  [ label = "DDG: hvst"] 
  "1001107" -> "1001182"  [ label = "DDG: INF"] 
  "1000952" -> "1001182"  [ label = "DDG: bit"] 
  "1000909" -> "1000911"  [ label = "DDG: "] 
  "1000909" -> "1000943"  [ label = "DDG: "] 
  "1000909" -> "1000948"  [ label = "DDG: "] 
  "1000909" -> "1000951"  [ label = "DDG: "] 
  "1000954" -> "1000952"  [ label = "DDG: N"] 
  "1000945" -> "1000944"  [ label = "DDG: X"] 
  "1000945" -> "1000944"  [ label = "DDG: N"] 
  "1000909" -> "1000952"  [ label = "DDG: "] 
  "1000959" -> "1000957"  [ label = "DDG: N"] 
  "1000963" -> "1000961"  [ label = "DDG: X"] 
  "1000967" -> "1000966"  [ label = "DDG: d[u]>d[v] || !(d[v]>d[u]) && u<v"] 
  "1000909" -> "1000924"  [ label = "DDG: "] 
  "1000929" -> "1000924"  [ label = "DDG: i"] 
  "1000909" -> "1000929"  [ label = "DDG: "] 
  "1000909" -> "1000932"  [ label = "DDG: "] 
  "1000909" -> "1000945"  [ label = "DDG: "] 
  "1000924" -> "1000945"  [ label = "DDG: N"] 
  "1000945" -> "1000954"  [ label = "DDG: N"] 
  "1000909" -> "1000954"  [ label = "DDG: "] 
  "1000909" -> "1000957"  [ label = "DDG: "] 
  "1000909" -> "1000961"  [ label = "DDG: "] 
  "1000929" -> "1000925"  [ label = "DDG: i"] 
  "1000909" -> "1000925"  [ label = "DDG: "] 
  "1000954" -> "1000959"  [ label = "DDG: N"] 
  "1000909" -> "1000959"  [ label = "DDG: "] 
  "1000948" -> "1000963"  [ label = "DDG: X"] 
  "1000909" -> "1000963"  [ label = "DDG: "] 
  "1000968" -> "1000967"  [ label = "DDG: d[u]"] 
  "1000968" -> "1000967"  [ label = "DDG: d[v]"] 
  "1000975" -> "1000967"  [ label = "DDG: u<v"] 
  "1000975" -> "1000967"  [ label = "DDG: !(d[v]>d[u])"] 
  "1000909" -> "1000939"  [ label = "DDG: "] 
  "1000909" -> "1000941"  [ label = "DDG: "] 
  "1000976" -> "1000975"  [ label = "DDG: d[v]>d[u]"] 
  "1000984" -> "1000975"  [ label = "DDG: v"] 
  "1000984" -> "1000975"  [ label = "DDG: u"] 
  "1000977" -> "1000976"  [ label = "DDG: d[u]"] 
  "1000977" -> "1000976"  [ label = "DDG: d[v]"] 
  "1000941" -> "1000984"  [ label = "DDG: u"] 
  "1000909" -> "1000984"  [ label = "DDG: "] 
  "1000939" -> "1000984"  [ label = "DDG: v"] 
  "1000968" -> "1000977"  [ label = "DDG: d[v]"] 
  "1000968" -> "1000977"  [ label = "DDG: d[u]"] 
  "1000924" -> "1000936"  [ label = "CDG: "] 
  "1000924" -> "1000934"  [ label = "CDG: "] 
  "1000924" -> "1000924"  [ label = "CDG: "] 
  "1000924" -> "1000941"  [ label = "CDG: "] 
  "1000924" -> "1000932"  [ label = "CDG: "] 
  "1000924" -> "1000939"  [ label = "CDG: "] 
  "1000924" -> "1000925"  [ label = "CDG: "] 
  "1000924" -> "1000929"  [ label = "CDG: "] 
  "1000992" -> "1001059"  [ label = "CDG: "] 
  "1000992" -> "1000995"  [ label = "CDG: "] 
  "1000992" -> "1001114"  [ label = "CDG: "] 
  "1000992" -> "1000992"  [ label = "CDG: "] 
  "1000992" -> "1000999"  [ label = "CDG: "] 
  "1000992" -> "1001004"  [ label = "CDG: "] 
  "1000992" -> "1001001"  [ label = "CDG: "] 
  "1000968" -> "1000977"  [ label = "CDG: "] 
  "1000968" -> "1000976"  [ label = "CDG: "] 
  "1000968" -> "1000981"  [ label = "CDG: "] 
  "1000968" -> "1000975"  [ label = "CDG: "] 
  "1000968" -> "1000978"  [ label = "CDG: "] 
  "1001004" -> "1001030"  [ label = "CDG: "] 
  "1001004" -> "1001043"  [ label = "CDG: "] 
  "1001004" -> "1001029"  [ label = "CDG: "] 
  "1001004" -> "1001042"  [ label = "CDG: "] 
  "1001004" -> "1001021"  [ label = "CDG: "] 
  "1001004" -> "1001038"  [ label = "CDG: "] 
  "1001004" -> "1001024"  [ label = "CDG: "] 
  "1001004" -> "1001025"  [ label = "CDG: "] 
  "1001004" -> "1001008"  [ label = "CDG: "] 
  "1001004" -> "1001016"  [ label = "CDG: "] 
  "1001004" -> "1001034"  [ label = "CDG: "] 
  "1001004" -> "1001041"  [ label = "CDG: "] 
  "1001004" -> "1001019"  [ label = "CDG: "] 
  "1001004" -> "1001014"  [ label = "CDG: "] 
  "1001004" -> "1001035"  [ label = "CDG: "] 
  "1001004" -> "1001012"  [ label = "CDG: "] 
  "1001059" -> "1001098"  [ label = "CDG: "] 
  "1001059" -> "1001067"  [ label = "CDG: "] 
  "1001059" -> "1001063"  [ label = "CDG: "] 
  "1001059" -> "1001080"  [ label = "CDG: "] 
  "1001059" -> "1001071"  [ label = "CDG: "] 
  "1001059" -> "1001091"  [ label = "CDG: "] 
  "1001059" -> "1001099"  [ label = "CDG: "] 
  "1001059" -> "1001069"  [ label = "CDG: "] 
  "1001059" -> "1001074"  [ label = "CDG: "] 
  "1001059" -> "1001085"  [ label = "CDG: "] 
  "1001059" -> "1001089"  [ label = "CDG: "] 
  "1001059" -> "1001086"  [ label = "CDG: "] 
  "1001059" -> "1001079"  [ label = "CDG: "] 
  "1001059" -> "1001097"  [ label = "CDG: "] 
  "1001059" -> "1001092"  [ label = "CDG: "] 
  "1001059" -> "1001083"  [ label = "CDG: "] 
  "1001059" -> "1001076"  [ label = "CDG: "] 
  "1001114" -> "1001121"  [ label = "CDG: "] 
  "1001114" -> "1001140"  [ label = "CDG: "] 
  "1001114" -> "1001124"  [ label = "CDG: "] 
  "1001114" -> "1001130"  [ label = "CDG: "] 
  "1001114" -> "1001138"  [ label = "CDG: "] 
  "1001114" -> "1001143"  [ label = "CDG: "] 
  "1001114" -> "1001153"  [ label = "CDG: "] 
  "1001114" -> "1001149"  [ label = "CDG: "] 
  "1001114" -> "1001128"  [ label = "CDG: "] 
  "1001114" -> "1001150"  [ label = "CDG: "] 
  "1001114" -> "1001148"  [ label = "CDG: "] 
  "1001114" -> "1001132"  [ label = "CDG: "] 
  "1001114" -> "1001133"  [ label = "CDG: "] 
  "1001114" -> "1001119"  [ label = "CDG: "] 
  "1001114" -> "1001127"  [ label = "CDG: "] 
  "1001114" -> "1001126"  [ label = "CDG: "] 
  "1001114" -> "1001142"  [ label = "CDG: "] 
  "1000976" -> "1000984"  [ label = "CDG: "] 
  "1001041" -> "1001047"  [ label = "CDG: "] 
  "1001041" -> "1001054"  [ label = "CDG: "] 
  "1001041" -> "1001056"  [ label = "CDG: "] 
  "1001041" -> "1001051"  [ label = "CDG: "] 
  "1001041" -> "1001048"  [ label = "CDG: "] 
  "1001097" -> "1001104"  [ label = "CDG: "] 
  "1001097" -> "1001107"  [ label = "CDG: "] 
  "1001097" -> "1001109"  [ label = "CDG: "] 
  "1001097" -> "1001103"  [ label = "CDG: "] 
  "1001097" -> "1001111"  [ label = "CDG: "] 
  "1001148" -> "1001158"  [ label = "CDG: "] 
  "1001148" -> "1001164"  [ label = "CDG: "] 
  "1001148" -> "1001169"  [ label = "CDG: "] 
  "1001148" -> "1001162"  [ label = "CDG: "] 
  "1001148" -> "1001168"  [ label = "CDG: "] 
  "1001148" -> "1001171"  [ label = "CDG: "] 
  "1001168" -> "1001175"  [ label = "CDG: "] 
  "1001168" -> "1001178"  [ label = "CDG: "] 
}
