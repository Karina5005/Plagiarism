digraph "main" {  
"1000570" [label = "(METHOD,main)" ]
"1000701" [label = "(METHOD_RETURN,signed)" ]
"1000572" [label = "(freopen,freopen(\"pro.in\",\"r\",stdin))" ]
"1000576" [label = "(freopen,freopen(\"pro.out\",\"w\",stdout))" ]
"1000587" [label = "(FI,FI(s+1))" ]
"1000632" [label = "(<operator>.assignment,T=-T)" ]
"1000649" [label = "(<operators>.assignmentArithmeticShiftRight,T>>=1)" ]
"1000695" [label = "(printf,printf(\"Yes\n\"))" ]
"1000697" [label = "(RETURN,return FastIO::Fflush(),0;,return FastIO::Fflush(),0;)" ]
"1000581" [label = "(<operator>.assignment,n=read())" ]
"1000584" [label = "(<operator>.assignment,T=read())" ]
"1000599" [label = "(<operator>.subtraction,s[i]-&#39)" ]
"1000605" [label = "(<operator>.and,a&#39)" ]
"1000608" [label = "(<operator>.subtraction,s[i]-&#39)" ]
"1000614" [label = "(<operator>.and,a&#39)" ]
"1000623" [label = "(<operator>.subtraction,s[i]-&#39)" ]
"1000629" [label = "(<operator>.and,a&#39)" ]
"1000637" [label = "(<operator>.logicalOr,T<0||T%2)" ]
"1000644" [label = "(RETURN,return printf(\"No\n\"),0;,return printf(\"No\n\"),0;)" ]
"1000684" [label = "(<operator>.assignmentPlus,cnt[i+1]+=cnt[i]/2)" ]
"1000588" [label = "(<operator>.addition,s+1)" ]
"1000593" [label = "(<operator>.notEquals,i!=n-1)" ]
"1000618" [label = "(<operator>.lessThan,i<n-1)" ]
"1000634" [label = "(<operator>.minus,-T)" ]
"1000654" [label = "(<operator>.and,T>>i&1)" ]
"1000659" [label = "(<operator>.assignment,ned[i]=1)" ]
"1000699" [label = "(FastIO::Fflush,FastIO::Fflush())" ]
"1000700" [label = "(LITERAL,0,)" ]
"1000638" [label = "(<operator>.lessThan,T<0)" ]
"1000641" [label = "(<operator>.modulo,T%2)" ]
"1000646" [label = "(printf,printf(\"No\n\"))" ]
"1000648" [label = "(LITERAL,0,)" ]
"1000680" [label = "(<operator>.postDecrement,cnt[i]--)" ]
"1000690" [label = "(<operator>.division,cnt[i]/2)" ]
"1000595" [label = "(<operator>.subtraction,n-1)" ]
"1000620" [label = "(<operator>.subtraction,n-1)" ]
"1000655" [label = "(<operator>.arithmeticShiftRight,T>>i)" ]
"1000671" [label = "(<operator>.logicalNot,!cnt[i])" ]
"1000675" [label = "(RETURN,return printf(\"No\n\"),0;,return printf(\"No\n\"),0;)" ]
"1000687" [label = "(<operator>.addition,i+1)" ]
"1000677" [label = "(printf,printf(\"No\n\"))" ]
"1000679" [label = "(LITERAL,0,)" ]
"1000666" [label = "(<operator>.indirectIndexAccess,ned[i])" ]
"1000685" [label = "(<operator>.indirectIndexAccess,cnt[i+1])" ]
"1000660" [label = "(<operator>.indirectIndexAccess,ned[i])" ]
"1000691" [label = "(<operator>.indirectIndexAccess,cnt[i])" ]
"1000681" [label = "(<operator>.indirectIndexAccess,cnt[i])" ]
"1000672" [label = "(<operator>.indirectIndexAccess,cnt[i])" ]
  "1000697" -> "1000701"  [ label = "DDG: <RET>"] 
  "1000572" -> "1000701"  [ label = "DDG: freopen(\"pro.in\",\"r\",stdin)"] 
  "1000576" -> "1000701"  [ label = "DDG: freopen(\"pro.out\",\"w\",stdout)"] 
  "1000584" -> "1000701"  [ label = "DDG: read()"] 
  "1000588" -> "1000701"  [ label = "DDG: s"] 
  "1000587" -> "1000701"  [ label = "DDG: s+1"] 
  "1000587" -> "1000701"  [ label = "DDG: FI(s+1)"] 
  "1000593" -> "1000701"  [ label = "DDG: i!=n-1"] 
  "1000618" -> "1000701"  [ label = "DDG: i"] 
  "1000620" -> "1000701"  [ label = "DDG: n"] 
  "1000618" -> "1000701"  [ label = "DDG: n-1"] 
  "1000618" -> "1000701"  [ label = "DDG: i<n-1"] 
  "1000623" -> "1000701"  [ label = "DDG: s[i]"] 
  "1000623" -> "1000701"  [ label = "DDG: &#39"] 
  "1000623" -> "1000701"  [ label = "DDG: s[i]-&#39"] 
  "1000629" -> "1000701"  [ label = "DDG: a"] 
  "1000629" -> "1000701"  [ label = "DDG: a&#39"] 
  "1000632" -> "1000701"  [ label = "DDG: -T"] 
  "1000638" -> "1000701"  [ label = "DDG: T"] 
  "1000637" -> "1000701"  [ label = "DDG: T<0"] 
  "1000641" -> "1000701"  [ label = "DDG: T"] 
  "1000637" -> "1000701"  [ label = "DDG: T%2"] 
  "1000637" -> "1000701"  [ label = "DDG: T<0||T%2"] 
  "1000649" -> "1000701"  [ label = "DDG: T>>=1"] 
  "1000655" -> "1000701"  [ label = "DDG: T"] 
  "1000655" -> "1000701"  [ label = "DDG: i"] 
  "1000654" -> "1000701"  [ label = "DDG: T>>i"] 
  "1000654" -> "1000701"  [ label = "DDG: T>>i&1"] 
  "1000659" -> "1000701"  [ label = "DDG: ned[i]"] 
  "1000671" -> "1000701"  [ label = "DDG: cnt[i]"] 
  "1000671" -> "1000701"  [ label = "DDG: !cnt[i]"] 
  "1000687" -> "1000701"  [ label = "DDG: i"] 
  "1000684" -> "1000701"  [ label = "DDG: cnt[i+1]"] 
  "1000690" -> "1000701"  [ label = "DDG: cnt[i]"] 
  "1000684" -> "1000701"  [ label = "DDG: cnt[i]/2"] 
  "1000695" -> "1000701"  [ label = "DDG: printf(\"Yes\n\")"] 
  "1000699" -> "1000701"  [ label = "DDG: FastIO::Fflush()"] 
  "1000677" -> "1000701"  [ label = "DDG: printf(\"No\n\")"] 
  "1000646" -> "1000701"  [ label = "DDG: printf(\"No\n\")"] 
  "1000644" -> "1000701"  [ label = "DDG: <RET>"] 
  "1000675" -> "1000701"  [ label = "DDG: <RET>"] 
  "1000576" -> "1000701"  [ label = "DDG: stdout"] 
  "1000572" -> "1000701"  [ label = "DDG: stdin"] 
  "1000634" -> "1000632"  [ label = "DDG: T"] 
  "1000570" -> "1000697"  [ label = "DDG: "] 
  "1000570" -> "1000572"  [ label = "DDG: "] 
  "1000570" -> "1000576"  [ label = "DDG: "] 
  "1000570" -> "1000581"  [ label = "DDG: "] 
  "1000570" -> "1000584"  [ label = "DDG: "] 
  "1000570" -> "1000587"  [ label = "DDG: "] 
  "1000570" -> "1000632"  [ label = "DDG: "] 
  "1000570" -> "1000644"  [ label = "DDG: "] 
  "1000638" -> "1000649"  [ label = "DDG: T"] 
  "1000641" -> "1000649"  [ label = "DDG: T"] 
  "1000570" -> "1000649"  [ label = "DDG: "] 
  "1000690" -> "1000684"  [ label = "DDG: 2"] 
  "1000690" -> "1000684"  [ label = "DDG: cnt[i]"] 
  "1000570" -> "1000695"  [ label = "DDG: "] 
  "1000570" -> "1000588"  [ label = "DDG: "] 
  "1000570" -> "1000599"  [ label = "DDG: "] 
  "1000570" -> "1000605"  [ label = "DDG: "] 
  "1000599" -> "1000608"  [ label = "DDG: s[i]"] 
  "1000570" -> "1000608"  [ label = "DDG: "] 
  "1000599" -> "1000608"  [ label = "DDG: &#39"] 
  "1000605" -> "1000614"  [ label = "DDG: a"] 
  "1000570" -> "1000614"  [ label = "DDG: "] 
  "1000608" -> "1000623"  [ label = "DDG: s[i]"] 
  "1000570" -> "1000623"  [ label = "DDG: "] 
  "1000608" -> "1000623"  [ label = "DDG: &#39"] 
  "1000614" -> "1000629"  [ label = "DDG: a"] 
  "1000570" -> "1000629"  [ label = "DDG: "] 
  "1000584" -> "1000634"  [ label = "DDG: T"] 
  "1000570" -> "1000634"  [ label = "DDG: "] 
  "1000638" -> "1000637"  [ label = "DDG: T"] 
  "1000638" -> "1000637"  [ label = "DDG: 0"] 
  "1000641" -> "1000637"  [ label = "DDG: T"] 
  "1000641" -> "1000637"  [ label = "DDG: 2"] 
  "1000570" -> "1000659"  [ label = "DDG: "] 
  "1000570" -> "1000699"  [ label = "DDG: "] 
  "1000570" -> "1000700"  [ label = "DDG: "] 
  "1000570" -> "1000593"  [ label = "DDG: "] 
  "1000595" -> "1000593"  [ label = "DDG: n"] 
  "1000595" -> "1000593"  [ label = "DDG: 1"] 
  "1000593" -> "1000618"  [ label = "DDG: i"] 
  "1000570" -> "1000618"  [ label = "DDG: "] 
  "1000620" -> "1000618"  [ label = "DDG: n"] 
  "1000620" -> "1000618"  [ label = "DDG: 1"] 
  "1000632" -> "1000638"  [ label = "DDG: T"] 
  "1000570" -> "1000638"  [ label = "DDG: "] 
  "1000638" -> "1000641"  [ label = "DDG: T"] 
  "1000570" -> "1000641"  [ label = "DDG: "] 
  "1000570" -> "1000648"  [ label = "DDG: "] 
  "1000655" -> "1000654"  [ label = "DDG: T"] 
  "1000655" -> "1000654"  [ label = "DDG: i"] 
  "1000570" -> "1000654"  [ label = "DDG: "] 
  "1000680" -> "1000690"  [ label = "DDG: cnt[i]"] 
  "1000570" -> "1000690"  [ label = "DDG: "] 
  "1000581" -> "1000595"  [ label = "DDG: n"] 
  "1000570" -> "1000595"  [ label = "DDG: "] 
  "1000595" -> "1000620"  [ label = "DDG: n"] 
  "1000570" -> "1000620"  [ label = "DDG: "] 
  "1000570" -> "1000646"  [ label = "DDG: "] 
  "1000649" -> "1000655"  [ label = "DDG: T"] 
  "1000570" -> "1000655"  [ label = "DDG: "] 
  "1000618" -> "1000655"  [ label = "DDG: i"] 
  "1000570" -> "1000675"  [ label = "DDG: "] 
  "1000671" -> "1000680"  [ label = "DDG: cnt[i]"] 
  "1000655" -> "1000687"  [ label = "DDG: i"] 
  "1000570" -> "1000687"  [ label = "DDG: "] 
  "1000570" -> "1000679"  [ label = "DDG: "] 
  "1000570" -> "1000677"  [ label = "DDG: "] 
  "1000637" -> "1000666"  [ label = "CDG: "] 
  "1000637" -> "1000649"  [ label = "CDG: "] 
  "1000637" -> "1000644"  [ label = "CDG: "] 
  "1000637" -> "1000654"  [ label = "CDG: "] 
  "1000637" -> "1000646"  [ label = "CDG: "] 
  "1000637" -> "1000655"  [ label = "CDG: "] 
  "1000638" -> "1000641"  [ label = "CDG: "] 
  "1000654" -> "1000659"  [ label = "CDG: "] 
  "1000654" -> "1000660"  [ label = "CDG: "] 
  "1000666" -> "1000691"  [ label = "CDG: "] 
  "1000666" -> "1000671"  [ label = "CDG: "] 
  "1000666" -> "1000697"  [ label = "CDG: "] 
  "1000666" -> "1000687"  [ label = "CDG: "] 
  "1000666" -> "1000684"  [ label = "CDG: "] 
  "1000666" -> "1000672"  [ label = "CDG: "] 
  "1000666" -> "1000690"  [ label = "CDG: "] 
  "1000666" -> "1000695"  [ label = "CDG: "] 
  "1000666" -> "1000699"  [ label = "CDG: "] 
  "1000666" -> "1000685"  [ label = "CDG: "] 
  "1000671" -> "1000681"  [ label = "CDG: "] 
  "1000671" -> "1000691"  [ label = "CDG: "] 
  "1000671" -> "1000697"  [ label = "CDG: "] 
  "1000671" -> "1000687"  [ label = "CDG: "] 
  "1000671" -> "1000684"  [ label = "CDG: "] 
  "1000671" -> "1000680"  [ label = "CDG: "] 
  "1000671" -> "1000690"  [ label = "CDG: "] 
  "1000671" -> "1000675"  [ label = "CDG: "] 
  "1000671" -> "1000695"  [ label = "CDG: "] 
  "1000671" -> "1000699"  [ label = "CDG: "] 
  "1000671" -> "1000685"  [ label = "CDG: "] 
  "1000671" -> "1000677"  [ label = "CDG: "] 
}
