digraph "DIVCNT" {  
"1000613" [label = "(METHOD,DIVCNT)" ]
"1000655" [label = "(METHOD_RETURN,int)" ]
"1000614" [label = "(PARAM,ll n)" ]
"1000617" [label = "(<operator>.assignment,cnt = 0)" ]
"1000653" [label = "(RETURN,return cnt;,return cnt;)" ]
"1000622" [label = "(<operator>.assignment,j= 1)" ]
"1000625" [label = "(<operator>.lessEqualsThan,j <= sqrt(n))" ]
"1000629" [label = "(<operator>.postIncrement,j++)" ]
"1000654" [label = "(IDENTIFIER,cnt,return cnt;)" ]
"1000627" [label = "(sqrt,sqrt(n))" ]
"1000633" [label = "(<operator>.equals,n % j == 0)" ]
"1000634" [label = "(<operator>.modulo,n % j)" ]
"1000640" [label = "(<operator>.equals,n / j == j)" ]
"1000645" [label = "(<operator>.postIncrement,cnt++)" ]
"1000648" [label = "(<operator>.assignment,cnt = cnt + 2)" ]
"1000641" [label = "(<operator>.division,n / j)" ]
"1000650" [label = "(<operator>.addition,cnt + 2)" ]
  "1000653" -> "1000655"  [ label = "DDG: <RET>"] 
  "1000614" -> "1000655"  [ label = "DDG: n"] 
  "1000617" -> "1000655"  [ label = "DDG: cnt"] 
  "1000625" -> "1000655"  [ label = "DDG: j"] 
  "1000627" -> "1000655"  [ label = "DDG: n"] 
  "1000625" -> "1000655"  [ label = "DDG: sqrt(n)"] 
  "1000625" -> "1000655"  [ label = "DDG: j <= sqrt(n)"] 
  "1000633" -> "1000655"  [ label = "DDG: n % j"] 
  "1000633" -> "1000655"  [ label = "DDG: n % j == 0"] 
  "1000640" -> "1000655"  [ label = "DDG: n / j"] 
  "1000640" -> "1000655"  [ label = "DDG: n / j == j"] 
  "1000648" -> "1000655"  [ label = "DDG: cnt"] 
  "1000648" -> "1000655"  [ label = "DDG: cnt + 2"] 
  "1000645" -> "1000655"  [ label = "DDG: cnt"] 
  "1000613" -> "1000614"  [ label = "DDG: "] 
  "1000613" -> "1000617"  [ label = "DDG: "] 
  "1000654" -> "1000653"  [ label = "DDG: cnt"] 
  "1000617" -> "1000653"  [ label = "DDG: cnt"] 
  "1000648" -> "1000653"  [ label = "DDG: cnt"] 
  "1000645" -> "1000653"  [ label = "DDG: cnt"] 
  "1000613" -> "1000622"  [ label = "DDG: "] 
  "1000613" -> "1000654"  [ label = "DDG: "] 
  "1000622" -> "1000625"  [ label = "DDG: j"] 
  "1000629" -> "1000625"  [ label = "DDG: j"] 
  "1000613" -> "1000625"  [ label = "DDG: "] 
  "1000627" -> "1000625"  [ label = "DDG: n"] 
  "1000634" -> "1000629"  [ label = "DDG: j"] 
  "1000640" -> "1000629"  [ label = "DDG: j"] 
  "1000613" -> "1000629"  [ label = "DDG: "] 
  "1000634" -> "1000627"  [ label = "DDG: n"] 
  "1000641" -> "1000627"  [ label = "DDG: n"] 
  "1000614" -> "1000627"  [ label = "DDG: n"] 
  "1000613" -> "1000627"  [ label = "DDG: "] 
  "1000634" -> "1000633"  [ label = "DDG: j"] 
  "1000634" -> "1000633"  [ label = "DDG: n"] 
  "1000613" -> "1000633"  [ label = "DDG: "] 
  "1000627" -> "1000634"  [ label = "DDG: n"] 
  "1000614" -> "1000634"  [ label = "DDG: n"] 
  "1000613" -> "1000634"  [ label = "DDG: "] 
  "1000625" -> "1000634"  [ label = "DDG: j"] 
  "1000641" -> "1000640"  [ label = "DDG: n"] 
  "1000641" -> "1000640"  [ label = "DDG: j"] 
  "1000613" -> "1000640"  [ label = "DDG: "] 
  "1000617" -> "1000645"  [ label = "DDG: cnt"] 
  "1000648" -> "1000645"  [ label = "DDG: cnt"] 
  "1000613" -> "1000645"  [ label = "DDG: "] 
  "1000613" -> "1000648"  [ label = "DDG: "] 
  "1000617" -> "1000648"  [ label = "DDG: cnt"] 
  "1000645" -> "1000648"  [ label = "DDG: cnt"] 
  "1000634" -> "1000641"  [ label = "DDG: n"] 
  "1000614" -> "1000641"  [ label = "DDG: n"] 
  "1000613" -> "1000641"  [ label = "DDG: "] 
  "1000634" -> "1000641"  [ label = "DDG: j"] 
  "1000617" -> "1000650"  [ label = "DDG: cnt"] 
  "1000648" -> "1000650"  [ label = "DDG: cnt"] 
  "1000645" -> "1000650"  [ label = "DDG: cnt"] 
  "1000613" -> "1000650"  [ label = "DDG: "] 
  "1000625" -> "1000633"  [ label = "CDG: "] 
  "1000625" -> "1000625"  [ label = "CDG: "] 
  "1000625" -> "1000627"  [ label = "CDG: "] 
  "1000625" -> "1000629"  [ label = "CDG: "] 
  "1000625" -> "1000634"  [ label = "CDG: "] 
  "1000633" -> "1000640"  [ label = "CDG: "] 
  "1000633" -> "1000641"  [ label = "CDG: "] 
  "1000640" -> "1000650"  [ label = "CDG: "] 
  "1000640" -> "1000645"  [ label = "CDG: "] 
  "1000640" -> "1000648"  [ label = "CDG: "] 
}
