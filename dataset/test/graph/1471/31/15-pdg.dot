digraph "getPrimes" {  
"1000667" [label = "(METHOD,getPrimes)" ]
"1000704" [label = "(METHOD_RETURN,vector<int>)" ]
"1000668" [label = "(PARAM,int n)" ]
"1000702" [label = "(RETURN,return ans;,return ans;)" ]
"1000672" [label = "(ans.push_back,ans.push_back(2))" ]
"1000674" [label = "(<operator>.assignmentDivision,n /= 2)" ]
"1000679" [label = "(<operator>.assignment,i = 3)" ]
"1000682" [label = "(<operator>.lessEqualsThan,i <= sqrt(n))" ]
"1000686" [label = "(<operator>.assignmentPlus,i += 2)" ]
"1000697" [label = "(<operator>.notEquals,n != 1)" ]
"1000700" [label = "(ans.push_back,ans.push_back(n))" ]
"1000703" [label = "(IDENTIFIER,ans,return ans;)" ]
"1000684" [label = "(sqrt,sqrt(n))" ]
"1000691" [label = "(ans.push_back,ans.push_back(i))" ]
"1000693" [label = "(<operator>.assignmentDivision,n /= i)" ]
  "1000702" -> "1000704"  [ label = "DDG: <RET>"] 
  "1000668" -> "1000704"  [ label = "DDG: n"] 
  "1000672" -> "1000704"  [ label = "DDG: ans.push_back(2)"] 
  "1000682" -> "1000704"  [ label = "DDG: i"] 
  "1000682" -> "1000704"  [ label = "DDG: sqrt(n)"] 
  "1000682" -> "1000704"  [ label = "DDG: i <= sqrt(n)"] 
  "1000697" -> "1000704"  [ label = "DDG: n"] 
  "1000697" -> "1000704"  [ label = "DDG: n != 1"] 
  "1000700" -> "1000704"  [ label = "DDG: n"] 
  "1000700" -> "1000704"  [ label = "DDG: ans.push_back(n)"] 
  "1000691" -> "1000704"  [ label = "DDG: ans.push_back(i)"] 
  "1000667" -> "1000668"  [ label = "DDG: "] 
  "1000703" -> "1000702"  [ label = "DDG: ans"] 
  "1000667" -> "1000702"  [ label = "DDG: "] 
  "1000667" -> "1000674"  [ label = "DDG: "] 
  "1000667" -> "1000679"  [ label = "DDG: "] 
  "1000667" -> "1000686"  [ label = "DDG: "] 
  "1000667" -> "1000703"  [ label = "DDG: "] 
  "1000667" -> "1000672"  [ label = "DDG: "] 
  "1000668" -> "1000674"  [ label = "DDG: n"] 
  "1000679" -> "1000682"  [ label = "DDG: i"] 
  "1000686" -> "1000682"  [ label = "DDG: i"] 
  "1000667" -> "1000682"  [ label = "DDG: "] 
  "1000684" -> "1000682"  [ label = "DDG: n"] 
  "1000691" -> "1000686"  [ label = "DDG: i"] 
  "1000684" -> "1000697"  [ label = "DDG: n"] 
  "1000668" -> "1000697"  [ label = "DDG: n"] 
  "1000667" -> "1000697"  [ label = "DDG: "] 
  "1000697" -> "1000700"  [ label = "DDG: n"] 
  "1000668" -> "1000700"  [ label = "DDG: n"] 
  "1000667" -> "1000700"  [ label = "DDG: "] 
  "1000674" -> "1000684"  [ label = "DDG: n"] 
  "1000693" -> "1000684"  [ label = "DDG: n"] 
  "1000668" -> "1000684"  [ label = "DDG: n"] 
  "1000667" -> "1000684"  [ label = "DDG: "] 
  "1000691" -> "1000693"  [ label = "DDG: i"] 
  "1000667" -> "1000693"  [ label = "DDG: "] 
  "1000682" -> "1000691"  [ label = "DDG: i"] 
  "1000667" -> "1000691"  [ label = "DDG: "] 
  "1000684" -> "1000693"  [ label = "DDG: n"] 
  "1000668" -> "1000693"  [ label = "DDG: n"] 
  "1000682" -> "1000682"  [ label = "CDG: "] 
  "1000682" -> "1000686"  [ label = "CDG: "] 
  "1000682" -> "1000693"  [ label = "CDG: "] 
  "1000682" -> "1000691"  [ label = "CDG: "] 
  "1000682" -> "1000684"  [ label = "CDG: "] 
  "1000697" -> "1000700"  [ label = "CDG: "] 
}
