digraph "getPrimes" {  
"1000668" [label = "(METHOD,getPrimes)" ]
"1000705" [label = "(METHOD_RETURN,vector<int>)" ]
"1000669" [label = "(PARAM,int n)" ]
"1000703" [label = "(RETURN,return ans;,return ans;)" ]
"1000673" [label = "(ans.push_back,ans.push_back(2))" ]
"1000675" [label = "(<operator>.assignmentDivision,n /= 2)" ]
"1000680" [label = "(<operator>.assignment,i = 3)" ]
"1000683" [label = "(<operator>.lessEqualsThan,i <= sqrt(n))" ]
"1000687" [label = "(<operator>.assignmentPlus,i += 2)" ]
"1000698" [label = "(<operator>.notEquals,n != 1)" ]
"1000701" [label = "(ans.push_back,ans.push_back(n))" ]
"1000704" [label = "(IDENTIFIER,ans,return ans;)" ]
"1000685" [label = "(sqrt,sqrt(n))" ]
"1000692" [label = "(ans.push_back,ans.push_back(i))" ]
"1000694" [label = "(<operator>.assignmentDivision,n /= i)" ]
  "1000703" -> "1000705"  [ label = "DDG: <RET>"] 
  "1000669" -> "1000705"  [ label = "DDG: n"] 
  "1000673" -> "1000705"  [ label = "DDG: ans.push_back(2)"] 
  "1000683" -> "1000705"  [ label = "DDG: i"] 
  "1000683" -> "1000705"  [ label = "DDG: sqrt(n)"] 
  "1000683" -> "1000705"  [ label = "DDG: i <= sqrt(n)"] 
  "1000698" -> "1000705"  [ label = "DDG: n"] 
  "1000698" -> "1000705"  [ label = "DDG: n != 1"] 
  "1000701" -> "1000705"  [ label = "DDG: n"] 
  "1000701" -> "1000705"  [ label = "DDG: ans.push_back(n)"] 
  "1000692" -> "1000705"  [ label = "DDG: ans.push_back(i)"] 
  "1000668" -> "1000669"  [ label = "DDG: "] 
  "1000704" -> "1000703"  [ label = "DDG: ans"] 
  "1000668" -> "1000703"  [ label = "DDG: "] 
  "1000668" -> "1000675"  [ label = "DDG: "] 
  "1000668" -> "1000680"  [ label = "DDG: "] 
  "1000668" -> "1000687"  [ label = "DDG: "] 
  "1000668" -> "1000704"  [ label = "DDG: "] 
  "1000668" -> "1000673"  [ label = "DDG: "] 
  "1000669" -> "1000675"  [ label = "DDG: n"] 
  "1000680" -> "1000683"  [ label = "DDG: i"] 
  "1000687" -> "1000683"  [ label = "DDG: i"] 
  "1000668" -> "1000683"  [ label = "DDG: "] 
  "1000685" -> "1000683"  [ label = "DDG: n"] 
  "1000692" -> "1000687"  [ label = "DDG: i"] 
  "1000685" -> "1000698"  [ label = "DDG: n"] 
  "1000669" -> "1000698"  [ label = "DDG: n"] 
  "1000668" -> "1000698"  [ label = "DDG: "] 
  "1000698" -> "1000701"  [ label = "DDG: n"] 
  "1000669" -> "1000701"  [ label = "DDG: n"] 
  "1000668" -> "1000701"  [ label = "DDG: "] 
  "1000675" -> "1000685"  [ label = "DDG: n"] 
  "1000694" -> "1000685"  [ label = "DDG: n"] 
  "1000669" -> "1000685"  [ label = "DDG: n"] 
  "1000668" -> "1000685"  [ label = "DDG: "] 
  "1000692" -> "1000694"  [ label = "DDG: i"] 
  "1000668" -> "1000694"  [ label = "DDG: "] 
  "1000683" -> "1000692"  [ label = "DDG: i"] 
  "1000668" -> "1000692"  [ label = "DDG: "] 
  "1000685" -> "1000694"  [ label = "DDG: n"] 
  "1000669" -> "1000694"  [ label = "DDG: n"] 
  "1000683" -> "1000692"  [ label = "CDG: "] 
  "1000683" -> "1000694"  [ label = "CDG: "] 
  "1000683" -> "1000685"  [ label = "CDG: "] 
  "1000683" -> "1000687"  [ label = "CDG: "] 
  "1000683" -> "1000683"  [ label = "CDG: "] 
  "1000698" -> "1000701"  [ label = "CDG: "] 
}
