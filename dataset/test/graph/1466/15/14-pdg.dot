digraph "SieveOfEratosthenes" {  
"1000550" [label = "(METHOD,SieveOfEratosthenes)" ]
"1000599" [label = "(METHOD_RETURN,void)" ]
"1000553" [label = "(<operator>.assignment,nnnnn = 1000000)" ]
"1000556" [label = "(prime.resize,prime.resize(nnnnn+1,true))" ]
"1000563" [label = "(<operator>.assignment,p = 2)" ]
"1000566" [label = "(<operator>.lessEqualsThan,p * p <= nnnnn)" ]
"1000571" [label = "(<operator>.postIncrement,p++)" ]
"1000557" [label = "(<operator>.addition,nnnnn+1)" ]
"1000567" [label = "(<operator>.multiplication,p * p)" ]
"1000575" [label = "(<operator>.equals,prime[p] == true)" ]
"1000583" [label = "(<operator>.assignment,i = p * p)" ]
"1000588" [label = "(<operator>.lessEqualsThan,i <= nnnnn)" ]
"1000591" [label = "(<operator>.assignmentPlus,i += p)" ]
"1000594" [label = "(<operator>.assignment,prime[i] = false)" ]
"1000585" [label = "(<operator>.multiplication,p * p)" ]
"1000576" [label = "(<operator>.indirectIndexAccess,prime[p])" ]
"1000595" [label = "(<operator>.indirectIndexAccess,prime[i])" ]
  "1000556" -> "1000599"  [ label = "DDG: nnnnn+1"] 
  "1000556" -> "1000599"  [ label = "DDG: true"] 
  "1000556" -> "1000599"  [ label = "DDG: prime.resize(nnnnn+1,true)"] 
  "1000567" -> "1000599"  [ label = "DDG: p"] 
  "1000566" -> "1000599"  [ label = "DDG: p * p"] 
  "1000566" -> "1000599"  [ label = "DDG: nnnnn"] 
  "1000566" -> "1000599"  [ label = "DDG: p * p <= nnnnn"] 
  "1000575" -> "1000599"  [ label = "DDG: prime[p]"] 
  "1000575" -> "1000599"  [ label = "DDG: true"] 
  "1000575" -> "1000599"  [ label = "DDG: prime[p] == true"] 
  "1000588" -> "1000599"  [ label = "DDG: i"] 
  "1000588" -> "1000599"  [ label = "DDG: i <= nnnnn"] 
  "1000594" -> "1000599"  [ label = "DDG: prime[i]"] 
  "1000594" -> "1000599"  [ label = "DDG: false"] 
  "1000550" -> "1000553"  [ label = "DDG: "] 
  "1000553" -> "1000556"  [ label = "DDG: nnnnn"] 
  "1000550" -> "1000556"  [ label = "DDG: "] 
  "1000550" -> "1000563"  [ label = "DDG: "] 
  "1000553" -> "1000557"  [ label = "DDG: nnnnn"] 
  "1000550" -> "1000557"  [ label = "DDG: "] 
  "1000567" -> "1000566"  [ label = "DDG: p"] 
  "1000588" -> "1000566"  [ label = "DDG: nnnnn"] 
  "1000550" -> "1000566"  [ label = "DDG: "] 
  "1000553" -> "1000566"  [ label = "DDG: nnnnn"] 
  "1000567" -> "1000571"  [ label = "DDG: p"] 
  "1000585" -> "1000571"  [ label = "DDG: p"] 
  "1000550" -> "1000571"  [ label = "DDG: "] 
  "1000563" -> "1000567"  [ label = "DDG: p"] 
  "1000571" -> "1000567"  [ label = "DDG: p"] 
  "1000550" -> "1000567"  [ label = "DDG: "] 
  "1000556" -> "1000575"  [ label = "DDG: true"] 
  "1000550" -> "1000575"  [ label = "DDG: "] 
  "1000585" -> "1000583"  [ label = "DDG: p"] 
  "1000585" -> "1000591"  [ label = "DDG: p"] 
  "1000550" -> "1000591"  [ label = "DDG: "] 
  "1000550" -> "1000594"  [ label = "DDG: "] 
  "1000550" -> "1000583"  [ label = "DDG: "] 
  "1000583" -> "1000588"  [ label = "DDG: i"] 
  "1000591" -> "1000588"  [ label = "DDG: i"] 
  "1000550" -> "1000588"  [ label = "DDG: "] 
  "1000566" -> "1000588"  [ label = "DDG: nnnnn"] 
  "1000588" -> "1000591"  [ label = "DDG: i"] 
  "1000567" -> "1000585"  [ label = "DDG: p"] 
  "1000550" -> "1000585"  [ label = "DDG: "] 
  "1000566" -> "1000571"  [ label = "CDG: "] 
  "1000566" -> "1000576"  [ label = "CDG: "] 
  "1000566" -> "1000566"  [ label = "CDG: "] 
  "1000566" -> "1000567"  [ label = "CDG: "] 
  "1000566" -> "1000575"  [ label = "CDG: "] 
  "1000575" -> "1000585"  [ label = "CDG: "] 
  "1000575" -> "1000588"  [ label = "CDG: "] 
  "1000575" -> "1000583"  [ label = "CDG: "] 
  "1000588" -> "1000595"  [ label = "CDG: "] 
  "1000588" -> "1000588"  [ label = "CDG: "] 
  "1000588" -> "1000594"  [ label = "CDG: "] 
  "1000588" -> "1000591"  [ label = "CDG: "] 
}
