digraph "SieveOfEratosthenes" {  
"1000118" [label = "(METHOD,SieveOfEratosthenes)" ]
"1000165" [label = "(METHOD_RETURN,void)" ]
"1000119" [label = "(PARAM,int n)" ]
"1000122" [label = "(memset,memset(prime, true, sizeof(prime)))" ]
"1000129" [label = "(<operator>.assignment,p = 2)" ]
"1000132" [label = "(<operator>.lessEqualsThan,p * p <= n)" ]
"1000137" [label = "(<operator>.postIncrement,p++)" ]
"1000125" [label = "(<operator>.sizeOf,sizeof(prime))" ]
"1000133" [label = "(<operator>.multiplication,p * p)" ]
"1000141" [label = "(<operator>.equals,prime[p] == true)" ]
"1000149" [label = "(<operator>.assignment,i = p * p)" ]
"1000154" [label = "(<operator>.lessEqualsThan,i <= n)" ]
"1000157" [label = "(<operator>.assignmentPlus,i += p)" ]
"1000160" [label = "(<operator>.assignment,prime[i] = false)" ]
"1000151" [label = "(<operator>.multiplication,p * p)" ]
"1000142" [label = "(<operator>.indirectIndexAccess,prime[p])" ]
"1000161" [label = "(<operator>.indirectIndexAccess,prime[i])" ]
  "1000119" -> "1000165"  [ label = "DDG: n"] 
  "1000122" -> "1000165"  [ label = "DDG: prime"] 
  "1000122" -> "1000165"  [ label = "DDG: true"] 
  "1000122" -> "1000165"  [ label = "DDG: memset(prime, true, sizeof(prime))"] 
  "1000133" -> "1000165"  [ label = "DDG: p"] 
  "1000132" -> "1000165"  [ label = "DDG: p * p"] 
  "1000132" -> "1000165"  [ label = "DDG: n"] 
  "1000132" -> "1000165"  [ label = "DDG: p * p <= n"] 
  "1000141" -> "1000165"  [ label = "DDG: prime[p]"] 
  "1000141" -> "1000165"  [ label = "DDG: true"] 
  "1000141" -> "1000165"  [ label = "DDG: prime[p] == true"] 
  "1000154" -> "1000165"  [ label = "DDG: i"] 
  "1000154" -> "1000165"  [ label = "DDG: i <= n"] 
  "1000160" -> "1000165"  [ label = "DDG: prime[i]"] 
  "1000160" -> "1000165"  [ label = "DDG: false"] 
  "1000118" -> "1000119"  [ label = "DDG: "] 
  "1000118" -> "1000122"  [ label = "DDG: "] 
  "1000118" -> "1000129"  [ label = "DDG: "] 
  "1000118" -> "1000125"  [ label = "DDG: "] 
  "1000133" -> "1000132"  [ label = "DDG: p"] 
  "1000154" -> "1000132"  [ label = "DDG: n"] 
  "1000119" -> "1000132"  [ label = "DDG: n"] 
  "1000118" -> "1000132"  [ label = "DDG: "] 
  "1000133" -> "1000137"  [ label = "DDG: p"] 
  "1000151" -> "1000137"  [ label = "DDG: p"] 
  "1000118" -> "1000137"  [ label = "DDG: "] 
  "1000129" -> "1000133"  [ label = "DDG: p"] 
  "1000137" -> "1000133"  [ label = "DDG: p"] 
  "1000118" -> "1000133"  [ label = "DDG: "] 
  "1000122" -> "1000141"  [ label = "DDG: prime"] 
  "1000122" -> "1000141"  [ label = "DDG: true"] 
  "1000118" -> "1000141"  [ label = "DDG: "] 
  "1000151" -> "1000149"  [ label = "DDG: p"] 
  "1000151" -> "1000157"  [ label = "DDG: p"] 
  "1000118" -> "1000157"  [ label = "DDG: "] 
  "1000118" -> "1000160"  [ label = "DDG: "] 
  "1000118" -> "1000149"  [ label = "DDG: "] 
  "1000149" -> "1000154"  [ label = "DDG: i"] 
  "1000157" -> "1000154"  [ label = "DDG: i"] 
  "1000118" -> "1000154"  [ label = "DDG: "] 
  "1000132" -> "1000154"  [ label = "DDG: n"] 
  "1000119" -> "1000154"  [ label = "DDG: n"] 
  "1000154" -> "1000157"  [ label = "DDG: i"] 
  "1000133" -> "1000151"  [ label = "DDG: p"] 
  "1000118" -> "1000151"  [ label = "DDG: "] 
  "1000132" -> "1000132"  [ label = "CDG: "] 
  "1000132" -> "1000142"  [ label = "CDG: "] 
  "1000132" -> "1000137"  [ label = "CDG: "] 
  "1000132" -> "1000141"  [ label = "CDG: "] 
  "1000132" -> "1000133"  [ label = "CDG: "] 
  "1000141" -> "1000154"  [ label = "CDG: "] 
  "1000141" -> "1000151"  [ label = "CDG: "] 
  "1000141" -> "1000149"  [ label = "CDG: "] 
  "1000154" -> "1000154"  [ label = "CDG: "] 
  "1000154" -> "1000161"  [ label = "CDG: "] 
  "1000154" -> "1000160"  [ label = "CDG: "] 
  "1000154" -> "1000157"  [ label = "CDG: "] 
}
