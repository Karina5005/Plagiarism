digraph "prime_result" {  
"1000445" [label = "(METHOD,prime_result)" ]
"1000487" [label = "(METHOD_RETURN,map<long long ,long long >)" ]
"1000446" [label = "(PARAM,long long n)" ]
"1000485" [label = "(RETURN,return result;,return result;)" ]
"1000451" [label = "(<operator>.assignment,i=2)" ]
"1000454" [label = "(<operator>.lessEqualsThan,i*i<=n)" ]
"1000459" [label = "(<operator>.preIncrement,++i)" ]
"1000477" [label = "(<operator>.notEquals,n!=1)" ]
"1000486" [label = "(IDENTIFIER,result,return result;)" ]
"1000481" [label = "(<operator>.postIncrement,result[n]++)" ]
"1000455" [label = "(<operator>.multiplication,i*i)" ]
"1000463" [label = "(<operator>.equals,n%i == 0)" ]
"1000469" [label = "(<operator>.postIncrement,result[i]++)" ]
"1000473" [label = "(<operator>.assignmentDivision,n/=i)" ]
"1000464" [label = "(<operator>.modulo,n%i)" ]
"1000482" [label = "(<operator>.indirectIndexAccess,result[n])" ]
"1000470" [label = "(<operator>.indirectIndexAccess,result[i])" ]
  "1000446" -> "1000487"  [ label = "DDG: n"] 
  "1000455" -> "1000487"  [ label = "DDG: i"] 
  "1000454" -> "1000487"  [ label = "DDG: i*i"] 
  "1000454" -> "1000487"  [ label = "DDG: i*i<=n"] 
  "1000477" -> "1000487"  [ label = "DDG: n"] 
  "1000477" -> "1000487"  [ label = "DDG: n!=1"] 
  "1000481" -> "1000487"  [ label = "DDG: result[n]"] 
  "1000463" -> "1000487"  [ label = "DDG: n%i"] 
  "1000463" -> "1000487"  [ label = "DDG: n%i == 0"] 
  "1000469" -> "1000487"  [ label = "DDG: result[i]"] 
  "1000485" -> "1000487"  [ label = "DDG: <RET>"] 
  "1000445" -> "1000446"  [ label = "DDG: "] 
  "1000486" -> "1000485"  [ label = "DDG: result"] 
  "1000481" -> "1000485"  [ label = "DDG: result[n]"] 
  "1000469" -> "1000485"  [ label = "DDG: result[i]"] 
  "1000445" -> "1000451"  [ label = "DDG: "] 
  "1000445" -> "1000486"  [ label = "DDG: "] 
  "1000455" -> "1000454"  [ label = "DDG: i"] 
  "1000464" -> "1000454"  [ label = "DDG: n"] 
  "1000446" -> "1000454"  [ label = "DDG: n"] 
  "1000445" -> "1000454"  [ label = "DDG: "] 
  "1000464" -> "1000459"  [ label = "DDG: i"] 
  "1000445" -> "1000459"  [ label = "DDG: "] 
  "1000454" -> "1000477"  [ label = "DDG: n"] 
  "1000446" -> "1000477"  [ label = "DDG: n"] 
  "1000445" -> "1000477"  [ label = "DDG: "] 
  "1000451" -> "1000455"  [ label = "DDG: i"] 
  "1000459" -> "1000455"  [ label = "DDG: i"] 
  "1000445" -> "1000455"  [ label = "DDG: "] 
  "1000464" -> "1000463"  [ label = "DDG: n"] 
  "1000464" -> "1000463"  [ label = "DDG: i"] 
  "1000445" -> "1000463"  [ label = "DDG: "] 
  "1000464" -> "1000473"  [ label = "DDG: i"] 
  "1000445" -> "1000473"  [ label = "DDG: "] 
  "1000454" -> "1000464"  [ label = "DDG: n"] 
  "1000473" -> "1000464"  [ label = "DDG: n"] 
  "1000446" -> "1000464"  [ label = "DDG: n"] 
  "1000445" -> "1000464"  [ label = "DDG: "] 
  "1000455" -> "1000464"  [ label = "DDG: i"] 
  "1000464" -> "1000473"  [ label = "DDG: n"] 
  "1000446" -> "1000473"  [ label = "DDG: n"] 
  "1000454" -> "1000464"  [ label = "CDG: "] 
  "1000454" -> "1000463"  [ label = "CDG: "] 
  "1000454" -> "1000459"  [ label = "CDG: "] 
  "1000454" -> "1000454"  [ label = "CDG: "] 
  "1000454" -> "1000455"  [ label = "CDG: "] 
  "1000477" -> "1000481"  [ label = "CDG: "] 
  "1000477" -> "1000482"  [ label = "CDG: "] 
  "1000463" -> "1000464"  [ label = "CDG: "] 
  "1000463" -> "1000463"  [ label = "CDG: "] 
  "1000463" -> "1000469"  [ label = "CDG: "] 
  "1000463" -> "1000473"  [ label = "CDG: "] 
  "1000463" -> "1000470"  [ label = "CDG: "] 
}
