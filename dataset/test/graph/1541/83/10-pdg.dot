digraph "isPalindrome" {  
"1000302" [label = "(METHOD,isPalindrome)" ]
"1000341" [label = "(METHOD_RETURN,bool)" ]
"1000303" [label = "(PARAM,string str)" ]
"1000306" [label = "(<operator>.assignment,ok = true)" ]
"1000310" [label = "(<operator>.assignment,l = 0)" ]
"1000314" [label = "(<operator>.assignment,h = str.size() - 1)" ]
"1000339" [label = "(RETURN,return ok;,return ok;)" ]
"1000320" [label = "(<operator>.greaterThan,h > l)" ]
"1000340" [label = "(IDENTIFIER,ok,return ok;)" ]
"1000316" [label = "(<operator>.subtraction,str.size() - 1)" ]
"1000325" [label = "(<operator>.notEquals,str[l++] != str[h--])" ]
"1000335" [label = "(<operator>.assignment,ok = false)" ]
"1000328" [label = "(<operator>.postIncrement,l++)" ]
"1000332" [label = "(<operator>.postDecrement,h--)" ]
"1000326" [label = "(<operator>.indirectIndexAccess,str[l++])" ]
"1000330" [label = "(<operator>.indirectIndexAccess,str[h--])" ]
  "1000339" -> "1000341"  [ label = "DDG: <RET>"] 
  "1000303" -> "1000341"  [ label = "DDG: str"] 
  "1000306" -> "1000341"  [ label = "DDG: ok"] 
  "1000316" -> "1000341"  [ label = "DDG: str.size()"] 
  "1000314" -> "1000341"  [ label = "DDG: str.size() - 1"] 
  "1000320" -> "1000341"  [ label = "DDG: h"] 
  "1000320" -> "1000341"  [ label = "DDG: l"] 
  "1000320" -> "1000341"  [ label = "DDG: h > l"] 
  "1000328" -> "1000341"  [ label = "DDG: l"] 
  "1000325" -> "1000341"  [ label = "DDG: str[l++]"] 
  "1000332" -> "1000341"  [ label = "DDG: h"] 
  "1000325" -> "1000341"  [ label = "DDG: str[h--]"] 
  "1000325" -> "1000341"  [ label = "DDG: str[l++] != str[h--]"] 
  "1000335" -> "1000341"  [ label = "DDG: ok"] 
  "1000335" -> "1000341"  [ label = "DDG: false"] 
  "1000306" -> "1000341"  [ label = "DDG: true"] 
  "1000302" -> "1000303"  [ label = "DDG: "] 
  "1000302" -> "1000306"  [ label = "DDG: "] 
  "1000302" -> "1000310"  [ label = "DDG: "] 
  "1000316" -> "1000314"  [ label = "DDG: 1"] 
  "1000316" -> "1000314"  [ label = "DDG: str.size()"] 
  "1000340" -> "1000339"  [ label = "DDG: ok"] 
  "1000306" -> "1000339"  [ label = "DDG: ok"] 
  "1000335" -> "1000339"  [ label = "DDG: ok"] 
  "1000302" -> "1000314"  [ label = "DDG: "] 
  "1000302" -> "1000340"  [ label = "DDG: "] 
  "1000302" -> "1000316"  [ label = "DDG: "] 
  "1000314" -> "1000320"  [ label = "DDG: h"] 
  "1000332" -> "1000320"  [ label = "DDG: h"] 
  "1000302" -> "1000320"  [ label = "DDG: "] 
  "1000310" -> "1000320"  [ label = "DDG: l"] 
  "1000328" -> "1000320"  [ label = "DDG: l"] 
  "1000303" -> "1000325"  [ label = "DDG: str"] 
  "1000302" -> "1000335"  [ label = "DDG: "] 
  "1000320" -> "1000328"  [ label = "DDG: l"] 
  "1000302" -> "1000328"  [ label = "DDG: "] 
  "1000320" -> "1000332"  [ label = "DDG: h"] 
  "1000302" -> "1000332"  [ label = "DDG: "] 
  "1000320" -> "1000328"  [ label = "CDG: "] 
  "1000320" -> "1000325"  [ label = "CDG: "] 
  "1000320" -> "1000326"  [ label = "CDG: "] 
  "1000320" -> "1000330"  [ label = "CDG: "] 
  "1000320" -> "1000332"  [ label = "CDG: "] 
  "1000325" -> "1000335"  [ label = "CDG: "] 
  "1000325" -> "1000320"  [ label = "CDG: "] 
}
