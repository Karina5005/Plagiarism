digraph "fillPrimes" {  
"1000115" [label = "(METHOD,fillPrimes)" ]
"1000163" [label = "(METHOD_RETURN,void)" ]
"1000117" [label = "(<operator>.assignment,isPrime[0] = isPrime[1] = false)" ]
"1000128" [label = "(<operator>.assignment,i = 2)" ]
"1000131" [label = "(<operator>.lessThan,i < maxlimit)" ]
"1000134" [label = "(<operator>.postIncrement,i++)" ]
"1000121" [label = "(<operator>.assignment,isPrime[1] = false)" ]
"1000138" [label = "(<operator>.equals,isPrime[i] == true)" ]
"1000146" [label = "(<operator>.assignment,j = 2 * i)" ]
"1000151" [label = "(<operator>.lessThan,j < maxlimit)" ]
"1000154" [label = "(<operator>.assignmentPlus,j += i)" ]
"1000158" [label = "(<operator>.assignment,isPrime[j] = false)" ]
"1000148" [label = "(<operator>.multiplication,2 * i)" ]
"1000139" [label = "(<operator>.indirectIndexAccess,isPrime[i])" ]
"1000159" [label = "(<operator>.indirectIndexAccess,isPrime[j])" ]
  "1000117" -> "1000163"  [ label = "DDG: isPrime[0]"] 
  "1000121" -> "1000163"  [ label = "DDG: isPrime[1]"] 
  "1000121" -> "1000163"  [ label = "DDG: false"] 
  "1000131" -> "1000163"  [ label = "DDG: i"] 
  "1000131" -> "1000163"  [ label = "DDG: maxlimit"] 
  "1000131" -> "1000163"  [ label = "DDG: i < maxlimit"] 
  "1000138" -> "1000163"  [ label = "DDG: isPrime[i]"] 
  "1000138" -> "1000163"  [ label = "DDG: isPrime[i] == true"] 
  "1000146" -> "1000163"  [ label = "DDG: 2 * i"] 
  "1000151" -> "1000163"  [ label = "DDG: j"] 
  "1000151" -> "1000163"  [ label = "DDG: j < maxlimit"] 
  "1000158" -> "1000163"  [ label = "DDG: isPrime[j]"] 
  "1000158" -> "1000163"  [ label = "DDG: false"] 
  "1000138" -> "1000163"  [ label = "DDG: true"] 
  "1000121" -> "1000117"  [ label = "DDG: isPrime[1]"] 
  "1000115" -> "1000117"  [ label = "DDG: "] 
  "1000115" -> "1000128"  [ label = "DDG: "] 
  "1000115" -> "1000121"  [ label = "DDG: "] 
  "1000128" -> "1000131"  [ label = "DDG: i"] 
  "1000134" -> "1000131"  [ label = "DDG: i"] 
  "1000115" -> "1000131"  [ label = "DDG: "] 
  "1000151" -> "1000131"  [ label = "DDG: maxlimit"] 
  "1000131" -> "1000134"  [ label = "DDG: i"] 
  "1000148" -> "1000134"  [ label = "DDG: i"] 
  "1000115" -> "1000134"  [ label = "DDG: "] 
  "1000115" -> "1000138"  [ label = "DDG: "] 
  "1000148" -> "1000146"  [ label = "DDG: i"] 
  "1000148" -> "1000146"  [ label = "DDG: 2"] 
  "1000148" -> "1000154"  [ label = "DDG: i"] 
  "1000115" -> "1000154"  [ label = "DDG: "] 
  "1000115" -> "1000146"  [ label = "DDG: "] 
  "1000146" -> "1000151"  [ label = "DDG: j"] 
  "1000154" -> "1000151"  [ label = "DDG: j"] 
  "1000115" -> "1000151"  [ label = "DDG: "] 
  "1000131" -> "1000151"  [ label = "DDG: maxlimit"] 
  "1000151" -> "1000154"  [ label = "DDG: j"] 
  "1000115" -> "1000158"  [ label = "DDG: "] 
  "1000115" -> "1000148"  [ label = "DDG: "] 
  "1000131" -> "1000148"  [ label = "DDG: i"] 
  "1000131" -> "1000131"  [ label = "CDG: "] 
  "1000131" -> "1000139"  [ label = "CDG: "] 
  "1000131" -> "1000138"  [ label = "CDG: "] 
  "1000131" -> "1000134"  [ label = "CDG: "] 
  "1000138" -> "1000151"  [ label = "CDG: "] 
  "1000138" -> "1000148"  [ label = "CDG: "] 
  "1000138" -> "1000146"  [ label = "CDG: "] 
  "1000151" -> "1000159"  [ label = "CDG: "] 
  "1000151" -> "1000158"  [ label = "CDG: "] 
  "1000151" -> "1000154"  [ label = "CDG: "] 
  "1000151" -> "1000151"  [ label = "CDG: "] 
}
