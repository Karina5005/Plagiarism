digraph "fillPrimes" {  
"1000116" [label = "(METHOD,fillPrimes)" ]
"1000164" [label = "(METHOD_RETURN,void)" ]
"1000118" [label = "(<operator>.assignment,isPrime[0] = isPrime[1] = false)" ]
"1000129" [label = "(<operator>.assignment,i = 2)" ]
"1000132" [label = "(<operator>.lessThan,i < maxlimit)" ]
"1000135" [label = "(<operator>.postIncrement,i++)" ]
"1000122" [label = "(<operator>.assignment,isPrime[1] = false)" ]
"1000139" [label = "(<operator>.equals,isPrime[i] == true)" ]
"1000147" [label = "(<operator>.assignment,j = 2 * i)" ]
"1000152" [label = "(<operator>.lessThan,j < maxlimit)" ]
"1000155" [label = "(<operator>.assignmentPlus,j += i)" ]
"1000159" [label = "(<operator>.assignment,isPrime[j] = false)" ]
"1000149" [label = "(<operator>.multiplication,2 * i)" ]
"1000140" [label = "(<operator>.indirectIndexAccess,isPrime[i])" ]
"1000160" [label = "(<operator>.indirectIndexAccess,isPrime[j])" ]
  "1000118" -> "1000164"  [ label = "DDG: isPrime[0]"] 
  "1000122" -> "1000164"  [ label = "DDG: isPrime[1]"] 
  "1000122" -> "1000164"  [ label = "DDG: false"] 
  "1000132" -> "1000164"  [ label = "DDG: i"] 
  "1000132" -> "1000164"  [ label = "DDG: maxlimit"] 
  "1000132" -> "1000164"  [ label = "DDG: i < maxlimit"] 
  "1000139" -> "1000164"  [ label = "DDG: isPrime[i]"] 
  "1000139" -> "1000164"  [ label = "DDG: isPrime[i] == true"] 
  "1000147" -> "1000164"  [ label = "DDG: 2 * i"] 
  "1000152" -> "1000164"  [ label = "DDG: j"] 
  "1000152" -> "1000164"  [ label = "DDG: j < maxlimit"] 
  "1000159" -> "1000164"  [ label = "DDG: isPrime[j]"] 
  "1000159" -> "1000164"  [ label = "DDG: false"] 
  "1000139" -> "1000164"  [ label = "DDG: true"] 
  "1000122" -> "1000118"  [ label = "DDG: isPrime[1]"] 
  "1000116" -> "1000118"  [ label = "DDG: "] 
  "1000116" -> "1000129"  [ label = "DDG: "] 
  "1000116" -> "1000122"  [ label = "DDG: "] 
  "1000129" -> "1000132"  [ label = "DDG: i"] 
  "1000135" -> "1000132"  [ label = "DDG: i"] 
  "1000116" -> "1000132"  [ label = "DDG: "] 
  "1000152" -> "1000132"  [ label = "DDG: maxlimit"] 
  "1000132" -> "1000135"  [ label = "DDG: i"] 
  "1000149" -> "1000135"  [ label = "DDG: i"] 
  "1000116" -> "1000135"  [ label = "DDG: "] 
  "1000116" -> "1000139"  [ label = "DDG: "] 
  "1000149" -> "1000147"  [ label = "DDG: i"] 
  "1000149" -> "1000147"  [ label = "DDG: 2"] 
  "1000149" -> "1000155"  [ label = "DDG: i"] 
  "1000116" -> "1000155"  [ label = "DDG: "] 
  "1000116" -> "1000147"  [ label = "DDG: "] 
  "1000147" -> "1000152"  [ label = "DDG: j"] 
  "1000155" -> "1000152"  [ label = "DDG: j"] 
  "1000116" -> "1000152"  [ label = "DDG: "] 
  "1000132" -> "1000152"  [ label = "DDG: maxlimit"] 
  "1000152" -> "1000155"  [ label = "DDG: j"] 
  "1000116" -> "1000159"  [ label = "DDG: "] 
  "1000116" -> "1000149"  [ label = "DDG: "] 
  "1000132" -> "1000149"  [ label = "DDG: i"] 
  "1000132" -> "1000132"  [ label = "CDG: "] 
  "1000132" -> "1000139"  [ label = "CDG: "] 
  "1000132" -> "1000135"  [ label = "CDG: "] 
  "1000132" -> "1000140"  [ label = "CDG: "] 
  "1000139" -> "1000147"  [ label = "CDG: "] 
  "1000139" -> "1000152"  [ label = "CDG: "] 
  "1000139" -> "1000149"  [ label = "CDG: "] 
  "1000152" -> "1000159"  [ label = "CDG: "] 
  "1000152" -> "1000155"  [ label = "CDG: "] 
  "1000152" -> "1000160"  [ label = "CDG: "] 
  "1000152" -> "1000152"  [ label = "CDG: "] 
}
