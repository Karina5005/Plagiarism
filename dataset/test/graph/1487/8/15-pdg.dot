digraph "SieveOfEratosthenes" {  
"1000490" [label = "(METHOD,SieveOfEratosthenes)" ]
"1000537" [label = "(METHOD_RETURN,void)" ]
"1000491" [label = "(PARAM,int n)" ]
"1000494" [label = "(memset,memset(prime, true, sizeof(prime)))" ]
"1000501" [label = "(<operator>.assignment,p = 2)" ]
"1000504" [label = "(<operator>.lessEqualsThan,p * p <= n)" ]
"1000509" [label = "(<operator>.postIncrement,p++)" ]
"1000497" [label = "(<operator>.sizeOf,sizeof(prime))" ]
"1000505" [label = "(<operator>.multiplication,p * p)" ]
"1000513" [label = "(<operator>.equals,prime[p] == true)" ]
"1000521" [label = "(<operator>.assignment,i = p * p)" ]
"1000526" [label = "(<operator>.lessEqualsThan,i <= n)" ]
"1000529" [label = "(<operator>.assignmentPlus,i += p)" ]
"1000532" [label = "(<operator>.assignment,prime[i] = false)" ]
"1000523" [label = "(<operator>.multiplication,p * p)" ]
"1000514" [label = "(<operator>.indirectIndexAccess,prime[p])" ]
"1000533" [label = "(<operator>.indirectIndexAccess,prime[i])" ]
  "1000491" -> "1000537"  [ label = "DDG: n"] 
  "1000494" -> "1000537"  [ label = "DDG: prime"] 
  "1000494" -> "1000537"  [ label = "DDG: true"] 
  "1000494" -> "1000537"  [ label = "DDG: memset(prime, true, sizeof(prime))"] 
  "1000505" -> "1000537"  [ label = "DDG: p"] 
  "1000504" -> "1000537"  [ label = "DDG: p * p"] 
  "1000504" -> "1000537"  [ label = "DDG: n"] 
  "1000504" -> "1000537"  [ label = "DDG: p * p <= n"] 
  "1000513" -> "1000537"  [ label = "DDG: prime[p]"] 
  "1000513" -> "1000537"  [ label = "DDG: true"] 
  "1000513" -> "1000537"  [ label = "DDG: prime[p] == true"] 
  "1000526" -> "1000537"  [ label = "DDG: i"] 
  "1000526" -> "1000537"  [ label = "DDG: i <= n"] 
  "1000532" -> "1000537"  [ label = "DDG: prime[i]"] 
  "1000532" -> "1000537"  [ label = "DDG: false"] 
  "1000490" -> "1000491"  [ label = "DDG: "] 
  "1000490" -> "1000494"  [ label = "DDG: "] 
  "1000490" -> "1000501"  [ label = "DDG: "] 
  "1000490" -> "1000497"  [ label = "DDG: "] 
  "1000505" -> "1000504"  [ label = "DDG: p"] 
  "1000526" -> "1000504"  [ label = "DDG: n"] 
  "1000491" -> "1000504"  [ label = "DDG: n"] 
  "1000490" -> "1000504"  [ label = "DDG: "] 
  "1000505" -> "1000509"  [ label = "DDG: p"] 
  "1000523" -> "1000509"  [ label = "DDG: p"] 
  "1000490" -> "1000509"  [ label = "DDG: "] 
  "1000501" -> "1000505"  [ label = "DDG: p"] 
  "1000509" -> "1000505"  [ label = "DDG: p"] 
  "1000490" -> "1000505"  [ label = "DDG: "] 
  "1000494" -> "1000513"  [ label = "DDG: prime"] 
  "1000494" -> "1000513"  [ label = "DDG: true"] 
  "1000490" -> "1000513"  [ label = "DDG: "] 
  "1000523" -> "1000521"  [ label = "DDG: p"] 
  "1000523" -> "1000529"  [ label = "DDG: p"] 
  "1000490" -> "1000529"  [ label = "DDG: "] 
  "1000490" -> "1000532"  [ label = "DDG: "] 
  "1000490" -> "1000521"  [ label = "DDG: "] 
  "1000521" -> "1000526"  [ label = "DDG: i"] 
  "1000529" -> "1000526"  [ label = "DDG: i"] 
  "1000490" -> "1000526"  [ label = "DDG: "] 
  "1000504" -> "1000526"  [ label = "DDG: n"] 
  "1000491" -> "1000526"  [ label = "DDG: n"] 
  "1000526" -> "1000529"  [ label = "DDG: i"] 
  "1000505" -> "1000523"  [ label = "DDG: p"] 
  "1000490" -> "1000523"  [ label = "DDG: "] 
  "1000504" -> "1000504"  [ label = "CDG: "] 
  "1000504" -> "1000514"  [ label = "CDG: "] 
  "1000504" -> "1000505"  [ label = "CDG: "] 
  "1000504" -> "1000509"  [ label = "CDG: "] 
  "1000504" -> "1000513"  [ label = "CDG: "] 
  "1000513" -> "1000523"  [ label = "CDG: "] 
  "1000513" -> "1000521"  [ label = "CDG: "] 
  "1000513" -> "1000526"  [ label = "CDG: "] 
  "1000526" -> "1000529"  [ label = "CDG: "] 
  "1000526" -> "1000526"  [ label = "CDG: "] 
  "1000526" -> "1000532"  [ label = "CDG: "] 
  "1000526" -> "1000533"  [ label = "CDG: "] 
}
