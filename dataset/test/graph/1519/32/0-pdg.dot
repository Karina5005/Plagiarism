digraph "main" {  
"1000101" [label = "(METHOD,main)" ]
"1000258" [label = "(METHOD_RETURN,int)" ]
"1000103" [label = "(ios_base::sync_with_stdio,ios_base::sync_with_stdio(0))" ]
"1000105" [label = "(cin.tie,cin.tie(0))" ]
"1000107" [label = "(freopen,freopen(\"in.txt\", \"r\", stdin))" ]
"1000111" [label = "(freopen,freopen(\"out.txt\", \"w\", stdout))" ]
"1000116" [label = "(<operator>.arithmeticShiftRight,cin >> t)" ]
"1000256" [label = "(RETURN,return 0;,return 0;)" ]
"1000120" [label = "(<operator>.postDecrement,t--)" ]
"1000257" [label = "(LITERAL,0,return 0;)" ]
"1000124" [label = "(<operator>.arithmeticShiftRight,cin >> n)" ]
"1000127" [label = "(<operator>.lessThan,vector<vector<ll>> v(n))" ]
"1000139" [label = "(<operator>.arithmeticShiftRight,cin >> i)" ]
"1000142" [label = "(<operator>.preDecrement,--i)" ]
"1000150" [label = "(<operator>.lessThan,i < n)" ]
"1000153" [label = "(<operator>.preIncrement,++i)" ]
"1000166" [label = "(sort,sort(i.begin(), i.end()))" ]
"1000237" [label = "(<operator>.assignment,i = 1)" ]
"1000240" [label = "(<operator>.lessEqualsThan,i <= n)" ]
"1000243" [label = "(<operator>.preIncrement,++i)" ]
"1000245" [label = "(<operator>.shiftLeft,cout << ans[i] << \" \n\"[i == n])" ]
"1000129" [label = "(<operator>.lessThan,vector<ll>> v(n))" ]
"1000156" [label = "(<operator>.arithmeticShiftRight,cin >> x)" ]
"1000159" [label = "(v[u[i]].push_back,v[u[i]].push_back(x))" ]
"1000164" [label = "(i.empty,i.empty())" ]
"1000171" [label = "(<operator>.assignment,j = 1)" ]
"1000174" [label = "(<operator>.lessThan,j < i.size())" ]
"1000177" [label = "(<operator>.preIncrement,++j)" ]
"1000179" [label = "(<operator>.assignmentPlus,i[j] += i[j - 1])" ]
"1000190" [label = "(<operator>.assignment,k = 1)" ]
"1000193" [label = "(<operator>.greaterThan,i.size() / k > 0)" ]
"1000198" [label = "(<operator>.preIncrement,++k)" ]
"1000131" [label = "(<operator>.arithmeticShiftRight,ll>> v(n))" ]
"1000202" [label = "(<operator>.assignment,take = i.size() / k * k)" ]
"1000209" [label = "(<operator>.assignmentPlus,ans[k] += i.back())" ]
"1000247" [label = "(<operator>.shiftLeft,ans[i] << \" \n\"[i == n])" ]
"1000133" [label = "(v,v(n))" ]
"1000194" [label = "(<operator>.division,i.size() / k)" ]
"1000215" [label = "(<operator>.greaterEqualsThan,(int)i.size() - take - 1 >= 0)" ]
"1000224" [label = "(<operator>.assignmentMinus,ans[k] -= i[i.size() - take - 1])" ]
"1000185" [label = "(<operator>.subtraction,j - 1)" ]
"1000204" [label = "(<operator>.division,i.size() / k * k)" ]
"1000253" [label = "(<operator>.equals,i == n)" ]
"1000206" [label = "(<operator>.multiplication,k * k)" ]
"1000216" [label = "(<operator>.subtraction,(int)i.size() - take - 1)" ]
"1000217" [label = "(<operator>.cast,(int)i.size())" ]
"1000220" [label = "(<operator>.subtraction,take - 1)" ]
"1000230" [label = "(<operator>.subtraction,i.size() - take - 1)" ]
"1000232" [label = "(<operator>.subtraction,take - 1)" ]
"1000167" [label = "(i.begin,i.begin())" ]
"1000168" [label = "(i.end,i.end())" ]
"1000176" [label = "(i.size,i.size())" ]
"1000180" [label = "(<operator>.indirectIndexAccess,i[j])" ]
"1000183" [label = "(<operator>.indirectIndexAccess,i[j - 1])" ]
"1000248" [label = "(<operator>.indirectIndexAccess,ans[i])" ]
"1000251" [label = "(<operator>.indirectIndexAccess,\" \n\"[i == n])" ]
"1000195" [label = "(i.size,i.size())" ]
"1000210" [label = "(<operator>.indirectIndexAccess,ans[k])" ]
"1000213" [label = "(i.back,i.back())" ]
"1000205" [label = "(i.size,i.size())" ]
"1000225" [label = "(<operator>.indirectIndexAccess,ans[k])" ]
"1000228" [label = "(<operator>.indirectIndexAccess,i[i.size() - take - 1])" ]
"1000218" [label = "(UNKNOWN,int,int)" ]
"1000219" [label = "(i.size,i.size())" ]
"1000231" [label = "(i.size,i.size())" ]
  "1000103" -> "1000258"  [ label = "DDG: ios_base::sync_with_stdio(0)"] 
  "1000105" -> "1000258"  [ label = "DDG: cin.tie(0)"] 
  "1000107" -> "1000258"  [ label = "DDG: freopen(\"in.txt\", \"r\", stdin)"] 
  "1000111" -> "1000258"  [ label = "DDG: freopen(\"out.txt\", \"w\", stdout)"] 
  "1000116" -> "1000258"  [ label = "DDG: cin"] 
  "1000116" -> "1000258"  [ label = "DDG: cin >> t"] 
  "1000120" -> "1000258"  [ label = "DDG: t"] 
  "1000124" -> "1000258"  [ label = "DDG: cin >> n"] 
  "1000127" -> "1000258"  [ label = "DDG: vector"] 
  "1000131" -> "1000258"  [ label = "DDG: v(n)"] 
  "1000129" -> "1000258"  [ label = "DDG: ll>> v(n)"] 
  "1000127" -> "1000258"  [ label = "DDG: vector<ll>> v(n)"] 
  "1000127" -> "1000258"  [ label = "DDG: vector<vector<ll>> v(n)"] 
  "1000139" -> "1000258"  [ label = "DDG: cin"] 
  "1000139" -> "1000258"  [ label = "DDG: cin >> i"] 
  "1000150" -> "1000258"  [ label = "DDG: i"] 
  "1000150" -> "1000258"  [ label = "DDG: n"] 
  "1000150" -> "1000258"  [ label = "DDG: i < n"] 
  "1000164" -> "1000258"  [ label = "DDG: i.empty()"] 
  "1000166" -> "1000258"  [ label = "DDG: i.begin()"] 
  "1000166" -> "1000258"  [ label = "DDG: i.end()"] 
  "1000166" -> "1000258"  [ label = "DDG: sort(i.begin(), i.end())"] 
  "1000174" -> "1000258"  [ label = "DDG: j"] 
  "1000174" -> "1000258"  [ label = "DDG: j < i.size()"] 
  "1000194" -> "1000258"  [ label = "DDG: i.size()"] 
  "1000194" -> "1000258"  [ label = "DDG: k"] 
  "1000193" -> "1000258"  [ label = "DDG: i.size() / k"] 
  "1000193" -> "1000258"  [ label = "DDG: i.size() / k > 0"] 
  "1000240" -> "1000258"  [ label = "DDG: i"] 
  "1000240" -> "1000258"  [ label = "DDG: n"] 
  "1000240" -> "1000258"  [ label = "DDG: i <= n"] 
  "1000247" -> "1000258"  [ label = "DDG: ans[i]"] 
  "1000247" -> "1000258"  [ label = "DDG: \" \n\"[i == n]"] 
  "1000245" -> "1000258"  [ label = "DDG: ans[i] << \" \n\"[i == n]"] 
  "1000245" -> "1000258"  [ label = "DDG: cout << ans[i] << \" \n\"[i == n]"] 
  "1000204" -> "1000258"  [ label = "DDG: k * k"] 
  "1000202" -> "1000258"  [ label = "DDG: i.size() / k * k"] 
  "1000209" -> "1000258"  [ label = "DDG: ans[k]"] 
  "1000209" -> "1000258"  [ label = "DDG: i.back()"] 
  "1000216" -> "1000258"  [ label = "DDG: (int)i.size()"] 
  "1000220" -> "1000258"  [ label = "DDG: take"] 
  "1000216" -> "1000258"  [ label = "DDG: take - 1"] 
  "1000215" -> "1000258"  [ label = "DDG: (int)i.size() - take - 1"] 
  "1000215" -> "1000258"  [ label = "DDG: (int)i.size() - take - 1 >= 0"] 
  "1000224" -> "1000258"  [ label = "DDG: ans[k]"] 
  "1000232" -> "1000258"  [ label = "DDG: take"] 
  "1000230" -> "1000258"  [ label = "DDG: take - 1"] 
  "1000224" -> "1000258"  [ label = "DDG: i[i.size() - take - 1]"] 
  "1000179" -> "1000258"  [ label = "DDG: i[j]"] 
  "1000179" -> "1000258"  [ label = "DDG: i[j - 1]"] 
  "1000156" -> "1000258"  [ label = "DDG: cin"] 
  "1000156" -> "1000258"  [ label = "DDG: cin >> x"] 
  "1000159" -> "1000258"  [ label = "DDG: x"] 
  "1000159" -> "1000258"  [ label = "DDG: v[u[i]].push_back(x)"] 
  "1000256" -> "1000258"  [ label = "DDG: <RET>"] 
  "1000111" -> "1000258"  [ label = "DDG: stdout"] 
  "1000131" -> "1000258"  [ label = "DDG: ll"] 
  "1000245" -> "1000258"  [ label = "DDG: cout"] 
  "1000107" -> "1000258"  [ label = "DDG: stdin"] 
  "1000257" -> "1000256"  [ label = "DDG: 0"] 
  "1000101" -> "1000256"  [ label = "DDG: "] 
  "1000101" -> "1000103"  [ label = "DDG: "] 
  "1000101" -> "1000105"  [ label = "DDG: "] 
  "1000101" -> "1000107"  [ label = "DDG: "] 
  "1000101" -> "1000111"  [ label = "DDG: "] 
  "1000101" -> "1000116"  [ label = "DDG: "] 
  "1000101" -> "1000257"  [ label = "DDG: "] 
  "1000116" -> "1000120"  [ label = "DDG: t"] 
  "1000101" -> "1000120"  [ label = "DDG: "] 
  "1000116" -> "1000124"  [ label = "DDG: cin"] 
  "1000139" -> "1000124"  [ label = "DDG: cin"] 
  "1000156" -> "1000124"  [ label = "DDG: cin"] 
  "1000101" -> "1000124"  [ label = "DDG: "] 
  "1000150" -> "1000124"  [ label = "DDG: n"] 
  "1000240" -> "1000124"  [ label = "DDG: n"] 
  "1000129" -> "1000127"  [ label = "DDG: vector"] 
  "1000101" -> "1000127"  [ label = "DDG: "] 
  "1000129" -> "1000127"  [ label = "DDG: ll>> v(n)"] 
  "1000101" -> "1000237"  [ label = "DDG: "] 
  "1000127" -> "1000129"  [ label = "DDG: vector"] 
  "1000101" -> "1000129"  [ label = "DDG: "] 
  "1000131" -> "1000129"  [ label = "DDG: ll"] 
  "1000131" -> "1000129"  [ label = "DDG: v(n)"] 
  "1000124" -> "1000139"  [ label = "DDG: cin"] 
  "1000101" -> "1000139"  [ label = "DDG: "] 
  "1000150" -> "1000139"  [ label = "DDG: i"] 
  "1000240" -> "1000139"  [ label = "DDG: i"] 
  "1000179" -> "1000139"  [ label = "DDG: i[j]"] 
  "1000139" -> "1000142"  [ label = "DDG: i"] 
  "1000179" -> "1000142"  [ label = "DDG: i[j]"] 
  "1000101" -> "1000142"  [ label = "DDG: "] 
  "1000150" -> "1000142"  [ label = "DDG: i"] 
  "1000142" -> "1000150"  [ label = "DDG: i"] 
  "1000179" -> "1000150"  [ label = "DDG: i[j]"] 
  "1000153" -> "1000150"  [ label = "DDG: i"] 
  "1000101" -> "1000150"  [ label = "DDG: "] 
  "1000133" -> "1000150"  [ label = "DDG: n"] 
  "1000150" -> "1000153"  [ label = "DDG: i"] 
  "1000179" -> "1000153"  [ label = "DDG: i[j]"] 
  "1000101" -> "1000153"  [ label = "DDG: "] 
  "1000101" -> "1000164"  [ label = "DDG: "] 
  "1000101" -> "1000166"  [ label = "DDG: "] 
  "1000101" -> "1000171"  [ label = "DDG: "] 
  "1000150" -> "1000179"  [ label = "DDG: i"] 
  "1000101" -> "1000190"  [ label = "DDG: "] 
  "1000237" -> "1000240"  [ label = "DDG: i"] 
  "1000243" -> "1000240"  [ label = "DDG: i"] 
  "1000179" -> "1000240"  [ label = "DDG: i[j]"] 
  "1000101" -> "1000240"  [ label = "DDG: "] 
  "1000150" -> "1000240"  [ label = "DDG: i"] 
  "1000150" -> "1000240"  [ label = "DDG: n"] 
  "1000253" -> "1000240"  [ label = "DDG: n"] 
  "1000253" -> "1000243"  [ label = "DDG: i"] 
  "1000179" -> "1000243"  [ label = "DDG: i[j]"] 
  "1000101" -> "1000243"  [ label = "DDG: "] 
  "1000150" -> "1000243"  [ label = "DDG: i"] 
  "1000101" -> "1000245"  [ label = "DDG: "] 
  "1000247" -> "1000245"  [ label = "DDG: ans[i]"] 
  "1000247" -> "1000245"  [ label = "DDG: \" \n\"[i == n]"] 
  "1000101" -> "1000131"  [ label = "DDG: "] 
  "1000133" -> "1000131"  [ label = "DDG: n"] 
  "1000139" -> "1000156"  [ label = "DDG: cin"] 
  "1000101" -> "1000156"  [ label = "DDG: "] 
  "1000159" -> "1000156"  [ label = "DDG: x"] 
  "1000156" -> "1000159"  [ label = "DDG: x"] 
  "1000101" -> "1000159"  [ label = "DDG: "] 
  "1000171" -> "1000174"  [ label = "DDG: j"] 
  "1000177" -> "1000174"  [ label = "DDG: j"] 
  "1000101" -> "1000174"  [ label = "DDG: "] 
  "1000185" -> "1000177"  [ label = "DDG: j"] 
  "1000101" -> "1000177"  [ label = "DDG: "] 
  "1000194" -> "1000193"  [ label = "DDG: i.size()"] 
  "1000194" -> "1000193"  [ label = "DDG: k"] 
  "1000101" -> "1000193"  [ label = "DDG: "] 
  "1000206" -> "1000198"  [ label = "DDG: k"] 
  "1000101" -> "1000198"  [ label = "DDG: "] 
  "1000204" -> "1000202"  [ label = "DDG: k * k"] 
  "1000204" -> "1000202"  [ label = "DDG: i.size()"] 
  "1000101" -> "1000209"  [ label = "DDG: "] 
  "1000124" -> "1000133"  [ label = "DDG: n"] 
  "1000101" -> "1000133"  [ label = "DDG: "] 
  "1000101" -> "1000194"  [ label = "DDG: "] 
  "1000190" -> "1000194"  [ label = "DDG: k"] 
  "1000198" -> "1000194"  [ label = "DDG: k"] 
  "1000101" -> "1000202"  [ label = "DDG: "] 
  "1000224" -> "1000209"  [ label = "DDG: ans[k]"] 
  "1000150" -> "1000224"  [ label = "DDG: i"] 
  "1000174" -> "1000185"  [ label = "DDG: j"] 
  "1000101" -> "1000185"  [ label = "DDG: "] 
  "1000101" -> "1000204"  [ label = "DDG: "] 
  "1000206" -> "1000204"  [ label = "DDG: k"] 
  "1000216" -> "1000215"  [ label = "DDG: take - 1"] 
  "1000216" -> "1000215"  [ label = "DDG: (int)i.size()"] 
  "1000101" -> "1000215"  [ label = "DDG: "] 
  "1000209" -> "1000224"  [ label = "DDG: ans[k]"] 
  "1000240" -> "1000253"  [ label = "DDG: i"] 
  "1000179" -> "1000253"  [ label = "DDG: i[j]"] 
  "1000101" -> "1000253"  [ label = "DDG: "] 
  "1000150" -> "1000253"  [ label = "DDG: i"] 
  "1000240" -> "1000253"  [ label = "DDG: n"] 
  "1000194" -> "1000206"  [ label = "DDG: k"] 
  "1000101" -> "1000206"  [ label = "DDG: "] 
  "1000217" -> "1000216"  [ label = "DDG: i.size()"] 
  "1000220" -> "1000216"  [ label = "DDG: 1"] 
  "1000220" -> "1000216"  [ label = "DDG: take"] 
  "1000101" -> "1000217"  [ label = "DDG: "] 
  "1000202" -> "1000220"  [ label = "DDG: take"] 
  "1000101" -> "1000220"  [ label = "DDG: "] 
  "1000101" -> "1000230"  [ label = "DDG: "] 
  "1000232" -> "1000230"  [ label = "DDG: 1"] 
  "1000232" -> "1000230"  [ label = "DDG: take"] 
  "1000220" -> "1000232"  [ label = "DDG: take"] 
  "1000101" -> "1000232"  [ label = "DDG: "] 
  "1000120" -> "1000164"  [ label = "CDG: "] 
  "1000120" -> "1000127"  [ label = "CDG: "] 
  "1000120" -> "1000142"  [ label = "CDG: "] 
  "1000120" -> "1000150"  [ label = "CDG: "] 
  "1000120" -> "1000139"  [ label = "CDG: "] 
  "1000120" -> "1000133"  [ label = "CDG: "] 
  "1000120" -> "1000120"  [ label = "CDG: "] 
  "1000120" -> "1000131"  [ label = "CDG: "] 
  "1000120" -> "1000129"  [ label = "CDG: "] 
  "1000120" -> "1000124"  [ label = "CDG: "] 
  "1000150" -> "1000156"  [ label = "CDG: "] 
  "1000150" -> "1000150"  [ label = "CDG: "] 
  "1000150" -> "1000153"  [ label = "CDG: "] 
  "1000150" -> "1000159"  [ label = "CDG: "] 
  "1000240" -> "1000243"  [ label = "CDG: "] 
  "1000240" -> "1000251"  [ label = "CDG: "] 
  "1000240" -> "1000248"  [ label = "CDG: "] 
  "1000240" -> "1000240"  [ label = "CDG: "] 
  "1000240" -> "1000245"  [ label = "CDG: "] 
  "1000240" -> "1000247"  [ label = "CDG: "] 
  "1000240" -> "1000253"  [ label = "CDG: "] 
  "1000164" -> "1000174"  [ label = "CDG: "] 
  "1000164" -> "1000166"  [ label = "CDG: "] 
  "1000164" -> "1000190"  [ label = "CDG: "] 
  "1000164" -> "1000167"  [ label = "CDG: "] 
  "1000164" -> "1000194"  [ label = "CDG: "] 
  "1000164" -> "1000240"  [ label = "CDG: "] 
  "1000164" -> "1000176"  [ label = "CDG: "] 
  "1000164" -> "1000195"  [ label = "CDG: "] 
  "1000164" -> "1000168"  [ label = "CDG: "] 
  "1000164" -> "1000237"  [ label = "CDG: "] 
  "1000164" -> "1000171"  [ label = "CDG: "] 
  "1000164" -> "1000193"  [ label = "CDG: "] 
  "1000174" -> "1000174"  [ label = "CDG: "] 
  "1000174" -> "1000180"  [ label = "CDG: "] 
  "1000174" -> "1000183"  [ label = "CDG: "] 
  "1000174" -> "1000179"  [ label = "CDG: "] 
  "1000174" -> "1000176"  [ label = "CDG: "] 
  "1000174" -> "1000185"  [ label = "CDG: "] 
  "1000174" -> "1000177"  [ label = "CDG: "] 
  "1000193" -> "1000216"  [ label = "CDG: "] 
  "1000193" -> "1000204"  [ label = "CDG: "] 
  "1000193" -> "1000219"  [ label = "CDG: "] 
  "1000193" -> "1000210"  [ label = "CDG: "] 
  "1000193" -> "1000206"  [ label = "CDG: "] 
  "1000193" -> "1000220"  [ label = "CDG: "] 
  "1000193" -> "1000194"  [ label = "CDG: "] 
  "1000193" -> "1000217"  [ label = "CDG: "] 
  "1000193" -> "1000198"  [ label = "CDG: "] 
  "1000193" -> "1000195"  [ label = "CDG: "] 
  "1000193" -> "1000213"  [ label = "CDG: "] 
  "1000193" -> "1000215"  [ label = "CDG: "] 
  "1000193" -> "1000205"  [ label = "CDG: "] 
  "1000193" -> "1000218"  [ label = "CDG: "] 
  "1000193" -> "1000202"  [ label = "CDG: "] 
  "1000193" -> "1000193"  [ label = "CDG: "] 
  "1000193" -> "1000209"  [ label = "CDG: "] 
  "1000215" -> "1000224"  [ label = "CDG: "] 
  "1000215" -> "1000232"  [ label = "CDG: "] 
  "1000215" -> "1000230"  [ label = "CDG: "] 
  "1000215" -> "1000225"  [ label = "CDG: "] 
  "1000215" -> "1000231"  [ label = "CDG: "] 
  "1000215" -> "1000228"  [ label = "CDG: "] 
}
