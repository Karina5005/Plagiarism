digraph "getchar" {  
"1000183" [label = "(METHOD,getchar)" ]
"1000215" [label = "(METHOD_RETURN,inline char)" ]
"1000211" [label = "(RETURN,return *S++;,return *S++;)" ]
"1000186" [label = "(<operator>.equals,S == T)" ]
"1000190" [label = "(<operator>.assignment,T = (S = buf) +\n            fread(buf, 1, SIZE, stdin))" ]
"1000208" [label = "(<operator>.and,n&#39)" ]
"1000202" [label = "(<operator>.equals,S == T)" ]
"1000205" [label = "(RETURN,return&#39;,return&#39;)" ]
"1000213" [label = "(<operator>.postIncrement,S++)" ]
"1000192" [label = "(<operator>.addition,(S = buf) +\n            fread(buf, 1, SIZE, stdin))" ]
"1000193" [label = "(<operator>.assignment,S = buf)" ]
"1000196" [label = "(fread,fread(buf, 1, SIZE, stdin))" ]
"1000212" [label = "(<operator>.indirection,*S++)" ]
"1000206" [label = "(<operator>.addressOf,&#39)" ]
  "1000186" -> "1000215"  [ label = "DDG: T"] 
  "1000186" -> "1000215"  [ label = "DDG: S == T"] 
  "1000196" -> "1000215"  [ label = "DDG: buf"] 
  "1000196" -> "1000215"  [ label = "DDG: stdin"] 
  "1000192" -> "1000215"  [ label = "DDG: fread(buf, 1, SIZE, stdin)"] 
  "1000190" -> "1000215"  [ label = "DDG: (S = buf) +\n            fread(buf, 1, SIZE, stdin)"] 
  "1000202" -> "1000215"  [ label = "DDG: S"] 
  "1000202" -> "1000215"  [ label = "DDG: T"] 
  "1000202" -> "1000215"  [ label = "DDG: S == T"] 
  "1000208" -> "1000215"  [ label = "DDG: n&#39"] 
  "1000213" -> "1000215"  [ label = "DDG: S"] 
  "1000205" -> "1000215"  [ label = "DDG: <RET>"] 
  "1000211" -> "1000215"  [ label = "DDG: <RET>"] 
  "1000196" -> "1000215"  [ label = "DDG: SIZE"] 
  "1000208" -> "1000215"  [ label = "DDG: n"] 
  "1000183" -> "1000211"  [ label = "DDG: "] 
  "1000183" -> "1000186"  [ label = "DDG: "] 
  "1000196" -> "1000190"  [ label = "DDG: stdin"] 
  "1000196" -> "1000190"  [ label = "DDG: SIZE"] 
  "1000196" -> "1000190"  [ label = "DDG: 1"] 
  "1000196" -> "1000190"  [ label = "DDG: buf"] 
  "1000183" -> "1000190"  [ label = "DDG: "] 
  "1000183" -> "1000205"  [ label = "DDG: "] 
  "1000183" -> "1000208"  [ label = "DDG: "] 
  "1000186" -> "1000213"  [ label = "DDG: S"] 
  "1000202" -> "1000213"  [ label = "DDG: S"] 
  "1000183" -> "1000213"  [ label = "DDG: "] 
  "1000193" -> "1000192"  [ label = "DDG: S"] 
  "1000183" -> "1000192"  [ label = "DDG: "] 
  "1000196" -> "1000192"  [ label = "DDG: stdin"] 
  "1000196" -> "1000192"  [ label = "DDG: SIZE"] 
  "1000196" -> "1000192"  [ label = "DDG: 1"] 
  "1000196" -> "1000192"  [ label = "DDG: buf"] 
  "1000193" -> "1000202"  [ label = "DDG: S"] 
  "1000183" -> "1000202"  [ label = "DDG: "] 
  "1000190" -> "1000202"  [ label = "DDG: T"] 
  "1000183" -> "1000193"  [ label = "DDG: "] 
  "1000183" -> "1000196"  [ label = "DDG: "] 
  "1000186" -> "1000211"  [ label = "CDG: "] 
  "1000186" -> "1000190"  [ label = "CDG: "] 
  "1000186" -> "1000202"  [ label = "CDG: "] 
  "1000186" -> "1000193"  [ label = "CDG: "] 
  "1000186" -> "1000213"  [ label = "CDG: "] 
  "1000186" -> "1000192"  [ label = "CDG: "] 
  "1000186" -> "1000212"  [ label = "CDG: "] 
  "1000186" -> "1000196"  [ label = "CDG: "] 
  "1000202" -> "1000211"  [ label = "CDG: "] 
  "1000202" -> "1000206"  [ label = "CDG: "] 
  "1000202" -> "1000205"  [ label = "CDG: "] 
  "1000202" -> "1000208"  [ label = "CDG: "] 
  "1000202" -> "1000213"  [ label = "CDG: "] 
  "1000202" -> "1000212"  [ label = "CDG: "] 
}
